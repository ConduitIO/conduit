syntax = "proto3";

package api.v1;

import "opencdc/v1/opencdc.proto";
import "google/api/field_behavior.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/protobuf/timestamp.proto";

message Pipeline {
  // Status describes the pipeline status.
  enum Status {
    STATUS_UNSPECIFIED = 0;
    // Pipeline is running.
    STATUS_RUNNING = 1;
    // Pipeline gracefully stopped.
    STATUS_STOPPED = 2;
    // Pipeline stopped with an error (see State.error).
    STATUS_DEGRADED = 3;
  }

  message State {
    Status status = 1;
    // Error message when pipeline status is STATUS_DEGRADED.
    string error = 2;
  }
  message Config {
    string name = 1;
    string description = 2;
  }
  message DLQ {
    // plugin is the connector plugin used for storing DLQ records
    // default = builtin:log, configured to log with level WARN
    string plugin = 1;
    // settings are the plugin settings
    map<string, string> settings = 2;

    // window_size defines how many last acks/nacks are monitored in the window
    // that controls if the pipeline should stop (0 disables the window)
    // default = 1
    uint64 window_size = 3;
    // window_nack_threshold defines the number of nacks in the window that are
    // tolerated. Crossing the threshold stops the pipeline.
    // default = 0
    uint64 window_nack_threshold = 4;
  }

  string id = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  State state = 2;
  Config config = 3;

  // -- children connections ---------------------------------------------------

  repeated string connector_ids = 5 [(google.api.field_behavior) = OUTPUT_ONLY];
  repeated string processor_ids = 6 [(google.api.field_behavior) = OUTPUT_ONLY];

  google.protobuf.Timestamp created_at = 7;
  google.protobuf.Timestamp updated_at = 8;
}

message Connector {
  // Type shows the connector type.
  enum Type {
    TYPE_UNSPECIFIED = 0;
    // Connector is a source.
    TYPE_SOURCE = 1;
    // Connector is a destination.
    TYPE_DESTINATION = 2;
  }

  message SourceState {
    bytes position = 1;
  }

  message DestinationState {
    map<string, bytes> positions = 1;
  }

  message Config {
    string name = 1;
    map<string, string> settings = 2;
  }

  string id = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  oneof state {
    DestinationState destination_state = 2;
    SourceState source_state = 3;
  }
  Config config = 4;

  // -- immutable fields -------------------------------------------------------

  Type type = 5 [(google.api.field_behavior) = IMMUTABLE];
  string plugin = 6 [(google.api.field_behavior) = IMMUTABLE];
  string pipeline_id = 7 [(google.api.field_behavior) = IMMUTABLE];

  // -- children connections ---------------------------------------------------

  repeated string processor_ids = 8 [(google.api.field_behavior) = OUTPUT_ONLY];

  google.protobuf.Timestamp created_at = 9;
  google.protobuf.Timestamp updated_at = 10;
}

message Processor {
  message Parent {
    // Type shows the processor's parent type.
    enum Type {
      TYPE_UNSPECIFIED = 0;
      // Processor parent is a connector.
      TYPE_CONNECTOR = 1;
      // Processor parent is a pipeline.
      TYPE_PIPELINE = 2;
    }

    Type type = 1;
    string id = 2;
  }
  message Config {
    map<string, string> settings = 1;
  }

  string id = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  reserved 2; reserved "state"; // message does not track state
  Config config = 3;

  // -- immutable fields -------------------------------------------------------

  string type = 4 [(google.api.field_behavior) = IMMUTABLE];
  Parent parent = 6 [(google.api.field_behavior) = IMMUTABLE];

  google.protobuf.Timestamp created_at = 7;
  google.protobuf.Timestamp updated_at = 8;
}

// PipelineService exposes functionality for managing pipelines.
// Endpoints in this service can be used to create, fetch, modify or delete a
// pipeline. Entities connected to a pipeline (e.g. processors, connectors) can
// be fetched together with a pipeline, although they can not be modified
// through this service. Modifying these entities needs to be done through the
// service responsible for managing the corresponding entity.
service PipelineService {
  rpc ListPipelines(ListPipelinesRequest) returns (ListPipelinesResponse) {
    option (google.api.http) = {
      get: "/v1/pipelines"
      response_body: "pipelines"
    };
  };

  rpc CreatePipeline(CreatePipelineRequest) returns (CreatePipelineResponse) {
    option (google.api.http) = {
      post: "/v1/pipelines"
      body: "*"
      response_body: "pipeline"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "400";
        value: {
          schema: {
            json_schema: {
              ref: ".google.rpc.Status";
            }
          }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }';
          }
        }
      }
      responses: {
        key: "409";
        value: {
          schema: {
            json_schema: {
              ref: ".google.rpc.Status";
            }
          }
          examples: {
            key: "application/json"
            value: '{ "code": 6, "message": "already exists error", "details": [] }';
          }
        }
      }
    };
  };

  rpc GetPipeline(GetPipelineRequest) returns (GetPipelineResponse) {
    option (google.api.http) = {
      get: "/v1/pipelines/{id}"
      response_body: "pipeline"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "404";
        value: {
          schema: {
            json_schema: {
              ref: ".google.rpc.Status";
            }
          }
          examples: {
            key: "application/json"
            value: '{ "code": 5, "message": "resource not found error", "details": [] }';
          }
        }
      }
    };
  };

  rpc UpdatePipeline(UpdatePipelineRequest) returns (UpdatePipelineResponse) {
    option (google.api.http) = {
      put: "/v1/pipelines/{id}"
      body: "*"
      response_body: "pipeline"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "404";
        value: {
          schema: {
            json_schema: {
              ref: ".google.rpc.Status";
            }
          }
          examples: {
            key: "application/json"
            value: '{ "code": 5, "message": "resource not found error", "details": [] }';
          }
        }
      }
      responses: {
        key: "400";
        value: {
          schema: {
            json_schema: {
              ref: ".google.rpc.Status";
            }
          }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }';
          }
        }
      }
      responses: {
        key: "409";
        value: {
          schema: {
            json_schema: {
              ref: ".google.rpc.Status";
            }
          }
          examples: {
            key: "application/json"
            value: '{ "code": 6, "message": "already exists error", "details": [] }';
          }
        }
      }
    };
  };

  rpc DeletePipeline(DeletePipelineRequest) returns (DeletePipelineResponse) {
    option (google.api.http) = {
      delete: "/v1/pipelines/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "404";
        value: {
          schema: {
            json_schema: {
              ref: ".google.rpc.Status";
            }
          }
          examples: {
            key: "application/json"
            value: '{ "code": 5, "message": "resource not found error", "details": [] }';
          }
        }
      }
      responses: {
        key: "400";
        value: {
          schema: {
            json_schema: {
              ref: ".google.rpc.Status";
            }
          }
          examples: {
            key: "application/json"
            value: '{ "code": 9, "message": "failed precondition error", "details": [] }';
          }
        }
      }
    };
  };

  rpc StartPipeline(StartPipelineRequest) returns (StartPipelineResponse) {
    option (google.api.http) = {
      post: "/v1/pipelines/{id}/start"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "404";
        value: {
          schema: {
            json_schema: {
              ref: ".google.rpc.Status";
            }
          }
          examples: {
            key: "application/json"
            value: '{ "code": 5, "message": "resource not found error", "details": [] }';
          }
        }
      }
      responses: {
        key: "400";
        value: {
          schema: {
            json_schema: {
              ref: ".google.rpc.Status";
            }
          }
          examples: {
            key: "application/json"
            value: '{ "code": 9, "message": "failed precondition error", "details": [] }';
          }
        }
      }
    };
  };

  rpc StopPipeline(StopPipelineRequest) returns (StopPipelineResponse) {
    option (google.api.http) = {
      post: "/v1/pipelines/{id}/stop"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "404";
        value: {
          schema: {
            json_schema: {
              ref: ".google.rpc.Status";
            }
          }
          examples: {
            key: "application/json"
            value: '{ "code": 5, "message": "resource not found error", "details": [] }';
          }
        }
      }
      responses: {
        key: "400";
        value: {
          schema: {
            json_schema: {
              ref: ".google.rpc.Status";
            }
          }
          examples: {
            key: "application/json"
            value: '{ "code": 9, "message": "failed precondition error", "details": [] }';
          }
        }
      }
    };
  };

  rpc GetDLQ(GetDLQRequest) returns (GetDLQResponse) {
    option (google.api.http) = {
      get: "/v1/pipelines/{id}/dead-letter-queue"
      response_body: "dlq"
    };
  };

  rpc UpdateDLQ(UpdateDLQRequest) returns (UpdateDLQResponse) {
    option (google.api.http) = {
      put: "/v1/pipelines/{id}/dead-letter-queue"
      body: "dlq"
      response_body: "dlq"
    };
  };

  rpc ExportPipeline(ExportPipelineRequest) returns (ExportPipelineResponse) {
    option (google.api.http) = {
      post: "/v1/pipelines/{id}/export"
      response_body: "pipeline"
    };
  };

  rpc ImportPipeline(ImportPipelineRequest) returns (ImportPipelineResponse) {
    option (google.api.http) = {
      post: "/v1/pipelines/import"
      body: "pipeline"
      response_body: "pipeline"
    };
  };
}

message ListPipelinesRequest {
  // Regex to filter pipelines by name.
  string name = 1;
}
message ListPipelinesResponse {
  repeated Pipeline pipelines = 1;
}

message CreatePipelineRequest {
  Pipeline.Config config = 1;
}
message CreatePipelineResponse {
  Pipeline pipeline = 1;
}

message GetPipelineRequest {
  string id = 1;
}
message GetPipelineResponse {
  Pipeline pipeline = 1;
}

message UpdatePipelineRequest {
  string id = 1;
  Pipeline.Config config = 2;
}
message UpdatePipelineResponse {
  Pipeline pipeline = 1;
}

message DeletePipelineRequest {
  string id = 1;
}
message DeletePipelineResponse {}

message StartPipelineRequest {
  string id = 1;
}
message StartPipelineResponse {}

message StopPipelineRequest {
  string id = 1;
}
message StopPipelineResponse {}

message GetDLQRequest {
  string id = 1;
}
message GetDLQResponse {
  Pipeline.DLQ dlq = 1;
}
message UpdateDLQRequest {
  string id = 1;
  Pipeline.DLQ dlq = 2;
}
message UpdateDLQResponse {
  Pipeline.DLQ dlq = 1;
}

message ExportPipelineRequest {
  string id = 1;
}
message ExportPipelineResponse {
  Pipeline pipeline = 1;
}
message ImportPipelineRequest {
  Pipeline pipeline = 1;
}
message ImportPipelineResponse {
  Pipeline pipeline = 1;
}

// ConnectorService exposes CRUD functionality for managing connectors.
service ConnectorService {
  rpc ListConnectors(ListConnectorsRequest) returns (ListConnectorsResponse) {
    option (google.api.http) = {
      get: "/v1/connectors"
      response_body: "connectors"
    };
  };

  rpc InspectConnector(InspectConnectorRequest) returns (stream InspectConnectorResponse) {
    option (google.api.http) = {
      get: "/v1/connectors/{id}/inspect"
      response_body: "record"
    };
  }

  rpc GetConnector(GetConnectorRequest) returns (GetConnectorResponse) {
    option (google.api.http) = {
      get: "/v1/connectors/{id}"
      response_body: "connector"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "404";
        value: {
          schema: {
            json_schema: {
              ref: ".google.rpc.Status";
            }
          }
          examples: {
            key: "application/json"
            value: '{ "code": 5, "message": "resource not found error", "details": [] }';
          }
        }
      }
    };
  };

  rpc CreateConnector(CreateConnectorRequest) returns (CreateConnectorResponse) {
    option (google.api.http) = {
      post: "/v1/connectors"
      body: "*"
      response_body: "connector"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "400";
        value: {
          schema: {
            json_schema: {
              ref: ".google.rpc.Status";
            }
          }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }';
          }
        }
      }
    };
  };
  rpc ValidateConnector(ValidateConnectorRequest) returns (ValidateConnectorResponse) {
    option (google.api.http) = {
      post: "/v1/connectors/validate"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "500";
        value: {
          schema: {
            json_schema: {
              ref: ".google.rpc.Status";
            }
          }
          examples: {
            key: "application/json"
            value: '{ "code": 13, "message": "could not dispense destination", "details": [] }';
          }
        }
      }
      responses: {
        key: "400";
        value: {
          schema: {
            json_schema: {
              ref: ".google.rpc.Status";
            }
          }
          examples: {
            key: "application/json"
            value: '{ "code": 9, "message": "validation error: `aws.accessKeyId` config value must be set", "details": [] }';
          }
        }
      }
    };
  }

  rpc UpdateConnector(UpdateConnectorRequest) returns (UpdateConnectorResponse) {
    option (google.api.http) = {
      put: "/v1/connectors/{id}"
      body: "*"
      response_body: "connector"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "404";
        value: {
          schema: {
            json_schema: {
              ref: ".google.rpc.Status";
            }
          }
          examples: {
            key: "application/json"
            value: '{ "code": 5, "message": "resource not found error", "details": [] }';
          }
        }
      }
      responses: {
        key: "400";
        value: {
          schema: {
            json_schema: {
              ref: ".google.rpc.Status";
            }
          }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }';
          }
        }
      }
    };
  };

  rpc DeleteConnector(DeleteConnectorRequest) returns (DeleteConnectorResponse) {
    option (google.api.http) = {
      delete: "/v1/connectors/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "404";
        value: {
          schema: {
            json_schema: {
              ref: ".google.rpc.Status";
            }
          }
          examples: {
            key: "application/json"
            value: '{ "code": 5, "message": "resource not found error", "details": [] }';
          }
        }
      }
      responses: {
        key: "400";
        value: {
          schema: {
            json_schema: {
              ref: ".google.rpc.Status";
            }
          }
          examples: {
            key: "application/json"
            value: '{ "code": 9, "message": "failed precondition error", "details": [] }';
          }
        }
      }
    };
  };
}

message CreateConnectorRequest {
  Connector.Type type = 1;
  // Plugin name is the name of the builtin plugin, or the absolute path of a standalone plugin.
  string plugin = 2;
  // ID of the pipeline to which the connector will get attached.
  string pipeline_id = 3;
  Connector.Config config = 4;
}

message CreateConnectorResponse {
  Connector connector = 1;
}

message ValidateConnectorRequest {
  Connector.Type type = 1;
  // Plugin name is the name of the builtin plugin (builtin:name), or the absolute path of a standalone plugin.
  string plugin = 2;
  // Configurations for the connector to get validated
  Connector.Config config = 4;
}

message ValidateConnectorResponse {
}

message ListConnectorsRequest {
  string pipeline_id = 1;
}

message ListConnectorsResponse {
  repeated Connector connectors = 1;
}

message InspectConnectorRequest {
  string id = 1;
}
message InspectConnectorResponse {
  opencdc.v1.Record record = 1;
}

message GetConnectorRequest {
  string id = 1;
}
message GetConnectorResponse {
  Connector connector = 1;
}

message UpdateConnectorRequest {
  string id = 1;
  Connector.Config config = 2;
}
message UpdateConnectorResponse {
  Connector connector = 1;
}

message DeleteConnectorRequest {
  string id = 1;
}
message DeleteConnectorResponse {}

// ProcessorService exposes CRUD functionality for managing processors.
service ProcessorService {
  rpc ListProcessors(ListProcessorsRequest) returns (ListProcessorsResponse) {
    option (google.api.http) = {
      get: "/v1/processors"
      response_body: "processors"
    };
  };

  // InspectProcessorIn streams records coming into the specified processor
  rpc InspectProcessorIn(InspectProcessorInRequest) returns (stream InspectProcessorInResponse) {
    option (google.api.http) = {
      get: "/v1/processors/{id}/inspect-in"
      response_body: "record"
    };
  }

  // InspectProcessorOut streams the output records from the specified processor
  rpc InspectProcessorOut(InspectProcessorOutRequest) returns (stream InspectProcessorOutResponse) {
    option (google.api.http) = {
      get: "/v1/processors/{id}/inspect-out"
      response_body: "record"
    };
  }

  rpc GetProcessor(GetProcessorRequest) returns (GetProcessorResponse) {
    option (google.api.http) = {
      get: "/v1/processors/{id}"
      response_body: "processor"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "404";
        value: {
          schema: {
            json_schema: {
              ref: ".google.rpc.Status";
            }
          }
          examples: {
            key: "application/json"
            value: '{ "code": 5, "message": "resource not found error", "details": [] }';
          }
        }
      }
    };
  };

  rpc CreateProcessor(CreateProcessorRequest) returns (CreateProcessorResponse) {
    option (google.api.http) = {
      post: "/v1/processors"
      body: "*"
      response_body: "processor"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "400";
        value: {
          schema: {
            json_schema: {
              ref: ".google.rpc.Status";
            }
          }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }';
          }
        }
      }
    };
  };

  rpc UpdateProcessor(UpdateProcessorRequest) returns (UpdateProcessorResponse) {
    option (google.api.http) = {
      put: "/v1/processors/{id}"
      body: "*"
      response_body: "processor"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "404";
        value: {
          schema: {
            json_schema: {
              ref: ".google.rpc.Status";
            }
          }
          examples: {
            key: "application/json"
            value: '{ "code": 5, "message": "resource not found error", "details": [] }';
          }
        }
      }
      responses: {
        key: "400";
        value: {
          schema: {
            json_schema: {
              ref: ".google.rpc.Status";
            }
          }
          examples: {
            key: "application/json"
            value: '{ "code": 3, "message": "invalid arguments error", "details": [] }';
          }
        }
      }
    };
  };

  rpc DeleteProcessor(DeleteProcessorRequest) returns (DeleteProcessorResponse) {
    option (google.api.http) = {
      delete: "/v1/processors/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "404";
        value: {
          schema: {
            json_schema: {
              ref: ".google.rpc.Status";
            }
          }
          examples: {
            key: "application/json"
            value: '{ "code": 5, "message": "resource not found error", "details": [] }';
          }
        }
      }
      responses: {
        key: "400";
        value: {
          schema: {
            json_schema: {
              ref: ".google.rpc.Status";
            }
          }
          examples: {
            key: "application/json"
            value: '{ "code": 9, "message": "failed precondition error", "details": [] }';
          }
        }
      }
    };
  };
}

message ListProcessorsRequest {
  repeated string parent_ids = 1;
}
message ListProcessorsResponse {
  repeated Processor processors = 1;
}

message InspectProcessorInRequest {
  string id = 1;
}
message InspectProcessorInResponse {
  opencdc.v1.Record record = 1;
}

message InspectProcessorOutRequest {
  string id = 1;
}
message InspectProcessorOutResponse {
  opencdc.v1.Record record = 1;
}


message CreateProcessorRequest {
  string type = 1;
  Processor.Parent parent = 3;
  Processor.Config config = 4;
}
message CreateProcessorResponse {
  Processor processor = 1;
}

message GetProcessorRequest {
  string id = 1;
}
message GetProcessorResponse {
  Processor processor = 1;
}

message UpdateProcessorRequest {
  string id = 1;
  Processor.Config config = 2;
}
message UpdateProcessorResponse {
  Processor processor = 1;
}

message DeleteProcessorRequest {
  string id = 1;
}
message DeleteProcessorResponse {}

service InformationService {
  rpc GetInfo (GetInfoRequest) returns (GetInfoResponse) {
    option (google.api.http) = {
      get: "/info"
      response_body: "info"
    };
  };
}

message GetInfoRequest {}

message GetInfoResponse {
  Info info = 1;
}

message Info {
  string version = 1;
  string os = 2;
  string arch = 3;
}

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Conduit REST API";
    version: "v0.1.0";
    contact: {
      name: "Conduit project";
      url: "https://github.com/conduitio/conduit";
      email: "";
    }
    license: {
      name: "Apache License Version 2.0";
      url: "https://github.com/ConduitIO/conduit/blob/main/LICENSE.md";
    }
  }

  responses: {
    key: "500";
    value: {
      schema: {
        json_schema: {
          ref: ".google.rpc.Status";
        }
      }
      examples: {
        key: "application/json"
        value: '{ "code": 13, "message": "server error", "details": [] }';
      }
    }
  }
};

service PluginService {
  rpc ListPlugins(ListPluginsRequest) returns (ListPluginsResponse) {
    option (google.api.http) = {
      get: "/v1/plugins"
      response_body: "plugins"
    };
  };
}

message ListPluginsRequest {
  // Regex to filter plugins by name.
  string name = 1;
}

message ListPluginsResponse{
  repeated PluginSpecifications plugins = 1;
}

message PluginSpecifications{
  message Parameter {
    // Validation to be made on the parameter.
    message Validation{
      enum Type {
        TYPE_UNSPECIFIED = 0;
        // Parameter must be present.
        TYPE_REQUIRED = 1;
        // Parameter must be greater than {value}.
        TYPE_GREATER_THAN = 2;
        // Parameter must be less than {value}.
        TYPE_LESS_THAN = 3;
        // Parameter must be included in the comma separated list {value}.
        TYPE_INCLUSION = 4;
        // Parameter must not be included in the comma separated list {value}.
        TYPE_EXCLUSION = 5;
        // Parameter must match the regex {value}.
        TYPE_REGEX = 6;
      }

      Type type = 1;
      // The value to be compared with the parameter,
      // or a comma separated list in case of Validation.TYPE_INCLUSION or Validation.TYPE_EXCLUSION.
      string value = 2;
    }

    // Type shows the parameter type.
    enum Type {
      TYPE_UNSPECIFIED = 0;
      // Parameter is a string.
      TYPE_STRING = 1;
      // Parameter is an integer.
      TYPE_INT = 2;
      // Parameter is a float.
      TYPE_FLOAT = 3;
      // Parameter is a boolean.
      TYPE_BOOL = 4;
      // Parameter is a file.
      TYPE_FILE = 5;
      // Parameter is a duration.
      TYPE_DURATION = 6;
    }

    string description = 1;
    string default = 2;
    Type type = 3;
    repeated Validation validations = 4;
  }

  string name = 1;
  string summary = 2;
  string description = 3;
  string version = 4;
  string author = 5;
  map<string, Parameter> destination_params = 6;
  map<string, Parameter> source_params = 7;
}
