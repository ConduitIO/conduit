// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/conduitio/conduit/pkg/orchestrator (interfaces: PipelineService,ConnectorService,ProcessorService,ConnectorPluginService,ProcessorPluginService,LifecycleService)
//
// Generated by this command:
//
//	mockgen -typed -destination=mock/orchestrator.go -package=mock -mock_names=PipelineService=PipelineService,ConnectorService=ConnectorService,ProcessorService=ProcessorService,ConnectorPluginService=ConnectorPluginService,ProcessorPluginService=ProcessorPluginService,LifecycleService=LifecycleService . PipelineService,ConnectorService,ProcessorService,ConnectorPluginService,ProcessorPluginService,LifecycleService
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	pconnector "github.com/conduitio/conduit-connector-protocol/pconnector"
	sdk "github.com/conduitio/conduit-processor-sdk"
	connector "github.com/conduitio/conduit/pkg/connector"
	log "github.com/conduitio/conduit/pkg/foundation/log"
	pipeline "github.com/conduitio/conduit/pkg/pipeline"
	connector0 "github.com/conduitio/conduit/pkg/plugin/connector"
	processor "github.com/conduitio/conduit/pkg/processor"
	gomock "go.uber.org/mock/gomock"
)

// PipelineService is a mock of PipelineService interface.
type PipelineService struct {
	ctrl     *gomock.Controller
	recorder *PipelineServiceMockRecorder
	isgomock struct{}
}

// PipelineServiceMockRecorder is the mock recorder for PipelineService.
type PipelineServiceMockRecorder struct {
	mock *PipelineService
}

// NewPipelineService creates a new mock instance.
func NewPipelineService(ctrl *gomock.Controller) *PipelineService {
	mock := &PipelineService{ctrl: ctrl}
	mock.recorder = &PipelineServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *PipelineService) EXPECT() *PipelineServiceMockRecorder {
	return m.recorder
}

// AddConnector mocks base method.
func (m *PipelineService) AddConnector(ctx context.Context, pipelineID, connectorID string) (*pipeline.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddConnector", ctx, pipelineID, connectorID)
	ret0, _ := ret[0].(*pipeline.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddConnector indicates an expected call of AddConnector.
func (mr *PipelineServiceMockRecorder) AddConnector(ctx, pipelineID, connectorID any) *PipelineServiceAddConnectorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddConnector", reflect.TypeOf((*PipelineService)(nil).AddConnector), ctx, pipelineID, connectorID)
	return &PipelineServiceAddConnectorCall{Call: call}
}

// PipelineServiceAddConnectorCall wrap *gomock.Call
type PipelineServiceAddConnectorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *PipelineServiceAddConnectorCall) Return(arg0 *pipeline.Instance, arg1 error) *PipelineServiceAddConnectorCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *PipelineServiceAddConnectorCall) Do(f func(context.Context, string, string) (*pipeline.Instance, error)) *PipelineServiceAddConnectorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *PipelineServiceAddConnectorCall) DoAndReturn(f func(context.Context, string, string) (*pipeline.Instance, error)) *PipelineServiceAddConnectorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddProcessor mocks base method.
func (m *PipelineService) AddProcessor(ctx context.Context, pipelineID, processorID string) (*pipeline.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProcessor", ctx, pipelineID, processorID)
	ret0, _ := ret[0].(*pipeline.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProcessor indicates an expected call of AddProcessor.
func (mr *PipelineServiceMockRecorder) AddProcessor(ctx, pipelineID, processorID any) *PipelineServiceAddProcessorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProcessor", reflect.TypeOf((*PipelineService)(nil).AddProcessor), ctx, pipelineID, processorID)
	return &PipelineServiceAddProcessorCall{Call: call}
}

// PipelineServiceAddProcessorCall wrap *gomock.Call
type PipelineServiceAddProcessorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *PipelineServiceAddProcessorCall) Return(arg0 *pipeline.Instance, arg1 error) *PipelineServiceAddProcessorCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *PipelineServiceAddProcessorCall) Do(f func(context.Context, string, string) (*pipeline.Instance, error)) *PipelineServiceAddProcessorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *PipelineServiceAddProcessorCall) DoAndReturn(f func(context.Context, string, string) (*pipeline.Instance, error)) *PipelineServiceAddProcessorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *PipelineService) Create(ctx context.Context, id string, cfg pipeline.Config, p pipeline.ProvisionType) (*pipeline.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, id, cfg, p)
	ret0, _ := ret[0].(*pipeline.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *PipelineServiceMockRecorder) Create(ctx, id, cfg, p any) *PipelineServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*PipelineService)(nil).Create), ctx, id, cfg, p)
	return &PipelineServiceCreateCall{Call: call}
}

// PipelineServiceCreateCall wrap *gomock.Call
type PipelineServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *PipelineServiceCreateCall) Return(arg0 *pipeline.Instance, arg1 error) *PipelineServiceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *PipelineServiceCreateCall) Do(f func(context.Context, string, pipeline.Config, pipeline.ProvisionType) (*pipeline.Instance, error)) *PipelineServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *PipelineServiceCreateCall) DoAndReturn(f func(context.Context, string, pipeline.Config, pipeline.ProvisionType) (*pipeline.Instance, error)) *PipelineServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *PipelineService) Delete(ctx context.Context, pipelineID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, pipelineID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *PipelineServiceMockRecorder) Delete(ctx, pipelineID any) *PipelineServiceDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*PipelineService)(nil).Delete), ctx, pipelineID)
	return &PipelineServiceDeleteCall{Call: call}
}

// PipelineServiceDeleteCall wrap *gomock.Call
type PipelineServiceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *PipelineServiceDeleteCall) Return(arg0 error) *PipelineServiceDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *PipelineServiceDeleteCall) Do(f func(context.Context, string) error) *PipelineServiceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *PipelineServiceDeleteCall) DoAndReturn(f func(context.Context, string) error) *PipelineServiceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *PipelineService) Get(ctx context.Context, id string) (*pipeline.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*pipeline.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *PipelineServiceMockRecorder) Get(ctx, id any) *PipelineServiceGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*PipelineService)(nil).Get), ctx, id)
	return &PipelineServiceGetCall{Call: call}
}

// PipelineServiceGetCall wrap *gomock.Call
type PipelineServiceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *PipelineServiceGetCall) Return(arg0 *pipeline.Instance, arg1 error) *PipelineServiceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *PipelineServiceGetCall) Do(f func(context.Context, string) (*pipeline.Instance, error)) *PipelineServiceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *PipelineServiceGetCall) DoAndReturn(f func(context.Context, string) (*pipeline.Instance, error)) *PipelineServiceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *PipelineService) List(ctx context.Context) map[string]*pipeline.Instance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].(map[string]*pipeline.Instance)
	return ret0
}

// List indicates an expected call of List.
func (mr *PipelineServiceMockRecorder) List(ctx any) *PipelineServiceListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*PipelineService)(nil).List), ctx)
	return &PipelineServiceListCall{Call: call}
}

// PipelineServiceListCall wrap *gomock.Call
type PipelineServiceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *PipelineServiceListCall) Return(arg0 map[string]*pipeline.Instance) *PipelineServiceListCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *PipelineServiceListCall) Do(f func(context.Context) map[string]*pipeline.Instance) *PipelineServiceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *PipelineServiceListCall) DoAndReturn(f func(context.Context) map[string]*pipeline.Instance) *PipelineServiceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveConnector mocks base method.
func (m *PipelineService) RemoveConnector(ctx context.Context, pipelineID, connectorID string) (*pipeline.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveConnector", ctx, pipelineID, connectorID)
	ret0, _ := ret[0].(*pipeline.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveConnector indicates an expected call of RemoveConnector.
func (mr *PipelineServiceMockRecorder) RemoveConnector(ctx, pipelineID, connectorID any) *PipelineServiceRemoveConnectorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveConnector", reflect.TypeOf((*PipelineService)(nil).RemoveConnector), ctx, pipelineID, connectorID)
	return &PipelineServiceRemoveConnectorCall{Call: call}
}

// PipelineServiceRemoveConnectorCall wrap *gomock.Call
type PipelineServiceRemoveConnectorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *PipelineServiceRemoveConnectorCall) Return(arg0 *pipeline.Instance, arg1 error) *PipelineServiceRemoveConnectorCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *PipelineServiceRemoveConnectorCall) Do(f func(context.Context, string, string) (*pipeline.Instance, error)) *PipelineServiceRemoveConnectorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *PipelineServiceRemoveConnectorCall) DoAndReturn(f func(context.Context, string, string) (*pipeline.Instance, error)) *PipelineServiceRemoveConnectorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveProcessor mocks base method.
func (m *PipelineService) RemoveProcessor(ctx context.Context, pipelineID, processorID string) (*pipeline.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveProcessor", ctx, pipelineID, processorID)
	ret0, _ := ret[0].(*pipeline.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveProcessor indicates an expected call of RemoveProcessor.
func (mr *PipelineServiceMockRecorder) RemoveProcessor(ctx, pipelineID, processorID any) *PipelineServiceRemoveProcessorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveProcessor", reflect.TypeOf((*PipelineService)(nil).RemoveProcessor), ctx, pipelineID, processorID)
	return &PipelineServiceRemoveProcessorCall{Call: call}
}

// PipelineServiceRemoveProcessorCall wrap *gomock.Call
type PipelineServiceRemoveProcessorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *PipelineServiceRemoveProcessorCall) Return(arg0 *pipeline.Instance, arg1 error) *PipelineServiceRemoveProcessorCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *PipelineServiceRemoveProcessorCall) Do(f func(context.Context, string, string) (*pipeline.Instance, error)) *PipelineServiceRemoveProcessorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *PipelineServiceRemoveProcessorCall) DoAndReturn(f func(context.Context, string, string) (*pipeline.Instance, error)) *PipelineServiceRemoveProcessorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *PipelineService) Update(ctx context.Context, pipelineID string, cfg pipeline.Config) (*pipeline.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, pipelineID, cfg)
	ret0, _ := ret[0].(*pipeline.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *PipelineServiceMockRecorder) Update(ctx, pipelineID, cfg any) *PipelineServiceUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*PipelineService)(nil).Update), ctx, pipelineID, cfg)
	return &PipelineServiceUpdateCall{Call: call}
}

// PipelineServiceUpdateCall wrap *gomock.Call
type PipelineServiceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *PipelineServiceUpdateCall) Return(arg0 *pipeline.Instance, arg1 error) *PipelineServiceUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *PipelineServiceUpdateCall) Do(f func(context.Context, string, pipeline.Config) (*pipeline.Instance, error)) *PipelineServiceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *PipelineServiceUpdateCall) DoAndReturn(f func(context.Context, string, pipeline.Config) (*pipeline.Instance, error)) *PipelineServiceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateDLQ mocks base method.
func (m *PipelineService) UpdateDLQ(ctx context.Context, id string, dlq pipeline.DLQ) (*pipeline.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDLQ", ctx, id, dlq)
	ret0, _ := ret[0].(*pipeline.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDLQ indicates an expected call of UpdateDLQ.
func (mr *PipelineServiceMockRecorder) UpdateDLQ(ctx, id, dlq any) *PipelineServiceUpdateDLQCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDLQ", reflect.TypeOf((*PipelineService)(nil).UpdateDLQ), ctx, id, dlq)
	return &PipelineServiceUpdateDLQCall{Call: call}
}

// PipelineServiceUpdateDLQCall wrap *gomock.Call
type PipelineServiceUpdateDLQCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *PipelineServiceUpdateDLQCall) Return(arg0 *pipeline.Instance, arg1 error) *PipelineServiceUpdateDLQCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *PipelineServiceUpdateDLQCall) Do(f func(context.Context, string, pipeline.DLQ) (*pipeline.Instance, error)) *PipelineServiceUpdateDLQCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *PipelineServiceUpdateDLQCall) DoAndReturn(f func(context.Context, string, pipeline.DLQ) (*pipeline.Instance, error)) *PipelineServiceUpdateDLQCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ConnectorService is a mock of ConnectorService interface.
type ConnectorService struct {
	ctrl     *gomock.Controller
	recorder *ConnectorServiceMockRecorder
	isgomock struct{}
}

// ConnectorServiceMockRecorder is the mock recorder for ConnectorService.
type ConnectorServiceMockRecorder struct {
	mock *ConnectorService
}

// NewConnectorService creates a new mock instance.
func NewConnectorService(ctrl *gomock.Controller) *ConnectorService {
	mock := &ConnectorService{ctrl: ctrl}
	mock.recorder = &ConnectorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ConnectorService) EXPECT() *ConnectorServiceMockRecorder {
	return m.recorder
}

// AddProcessor mocks base method.
func (m *ConnectorService) AddProcessor(ctx context.Context, connectorID, processorID string) (*connector.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProcessor", ctx, connectorID, processorID)
	ret0, _ := ret[0].(*connector.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProcessor indicates an expected call of AddProcessor.
func (mr *ConnectorServiceMockRecorder) AddProcessor(ctx, connectorID, processorID any) *ConnectorServiceAddProcessorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProcessor", reflect.TypeOf((*ConnectorService)(nil).AddProcessor), ctx, connectorID, processorID)
	return &ConnectorServiceAddProcessorCall{Call: call}
}

// ConnectorServiceAddProcessorCall wrap *gomock.Call
type ConnectorServiceAddProcessorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ConnectorServiceAddProcessorCall) Return(arg0 *connector.Instance, arg1 error) *ConnectorServiceAddProcessorCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ConnectorServiceAddProcessorCall) Do(f func(context.Context, string, string) (*connector.Instance, error)) *ConnectorServiceAddProcessorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ConnectorServiceAddProcessorCall) DoAndReturn(f func(context.Context, string, string) (*connector.Instance, error)) *ConnectorServiceAddProcessorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *ConnectorService) Create(ctx context.Context, id string, t connector.Type, plugin, pipelineID string, c connector.Config, p connector.ProvisionType) (*connector.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, id, t, plugin, pipelineID, c, p)
	ret0, _ := ret[0].(*connector.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *ConnectorServiceMockRecorder) Create(ctx, id, t, plugin, pipelineID, c, p any) *ConnectorServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*ConnectorService)(nil).Create), ctx, id, t, plugin, pipelineID, c, p)
	return &ConnectorServiceCreateCall{Call: call}
}

// ConnectorServiceCreateCall wrap *gomock.Call
type ConnectorServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c_2 *ConnectorServiceCreateCall) Return(arg0 *connector.Instance, arg1 error) *ConnectorServiceCreateCall {
	c_2.Call = c_2.Call.Return(arg0, arg1)
	return c_2
}

// Do rewrite *gomock.Call.Do
func (c_2 *ConnectorServiceCreateCall) Do(f func(context.Context, string, connector.Type, string, string, connector.Config, connector.ProvisionType) (*connector.Instance, error)) *ConnectorServiceCreateCall {
	c_2.Call = c_2.Call.Do(f)
	return c_2
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c_2 *ConnectorServiceCreateCall) DoAndReturn(f func(context.Context, string, connector.Type, string, string, connector.Config, connector.ProvisionType) (*connector.Instance, error)) *ConnectorServiceCreateCall {
	c_2.Call = c_2.Call.DoAndReturn(f)
	return c_2
}

// Delete mocks base method.
func (m *ConnectorService) Delete(ctx context.Context, id string, dispenserFetcher connector.PluginDispenserFetcher) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id, dispenserFetcher)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *ConnectorServiceMockRecorder) Delete(ctx, id, dispenserFetcher any) *ConnectorServiceDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*ConnectorService)(nil).Delete), ctx, id, dispenserFetcher)
	return &ConnectorServiceDeleteCall{Call: call}
}

// ConnectorServiceDeleteCall wrap *gomock.Call
type ConnectorServiceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ConnectorServiceDeleteCall) Return(arg0 error) *ConnectorServiceDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ConnectorServiceDeleteCall) Do(f func(context.Context, string, connector.PluginDispenserFetcher) error) *ConnectorServiceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ConnectorServiceDeleteCall) DoAndReturn(f func(context.Context, string, connector.PluginDispenserFetcher) error) *ConnectorServiceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *ConnectorService) Get(ctx context.Context, id string) (*connector.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*connector.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *ConnectorServiceMockRecorder) Get(ctx, id any) *ConnectorServiceGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*ConnectorService)(nil).Get), ctx, id)
	return &ConnectorServiceGetCall{Call: call}
}

// ConnectorServiceGetCall wrap *gomock.Call
type ConnectorServiceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ConnectorServiceGetCall) Return(arg0 *connector.Instance, arg1 error) *ConnectorServiceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ConnectorServiceGetCall) Do(f func(context.Context, string) (*connector.Instance, error)) *ConnectorServiceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ConnectorServiceGetCall) DoAndReturn(f func(context.Context, string) (*connector.Instance, error)) *ConnectorServiceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *ConnectorService) List(ctx context.Context) map[string]*connector.Instance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].(map[string]*connector.Instance)
	return ret0
}

// List indicates an expected call of List.
func (mr *ConnectorServiceMockRecorder) List(ctx any) *ConnectorServiceListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*ConnectorService)(nil).List), ctx)
	return &ConnectorServiceListCall{Call: call}
}

// ConnectorServiceListCall wrap *gomock.Call
type ConnectorServiceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ConnectorServiceListCall) Return(arg0 map[string]*connector.Instance) *ConnectorServiceListCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ConnectorServiceListCall) Do(f func(context.Context) map[string]*connector.Instance) *ConnectorServiceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ConnectorServiceListCall) DoAndReturn(f func(context.Context) map[string]*connector.Instance) *ConnectorServiceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveProcessor mocks base method.
func (m *ConnectorService) RemoveProcessor(ctx context.Context, connectorID, processorID string) (*connector.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveProcessor", ctx, connectorID, processorID)
	ret0, _ := ret[0].(*connector.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveProcessor indicates an expected call of RemoveProcessor.
func (mr *ConnectorServiceMockRecorder) RemoveProcessor(ctx, connectorID, processorID any) *ConnectorServiceRemoveProcessorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveProcessor", reflect.TypeOf((*ConnectorService)(nil).RemoveProcessor), ctx, connectorID, processorID)
	return &ConnectorServiceRemoveProcessorCall{Call: call}
}

// ConnectorServiceRemoveProcessorCall wrap *gomock.Call
type ConnectorServiceRemoveProcessorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ConnectorServiceRemoveProcessorCall) Return(arg0 *connector.Instance, arg1 error) *ConnectorServiceRemoveProcessorCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ConnectorServiceRemoveProcessorCall) Do(f func(context.Context, string, string) (*connector.Instance, error)) *ConnectorServiceRemoveProcessorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ConnectorServiceRemoveProcessorCall) DoAndReturn(f func(context.Context, string, string) (*connector.Instance, error)) *ConnectorServiceRemoveProcessorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *ConnectorService) Update(ctx context.Context, id string, c connector.Config) (*connector.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, c)
	ret0, _ := ret[0].(*connector.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *ConnectorServiceMockRecorder) Update(ctx, id, c any) *ConnectorServiceUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*ConnectorService)(nil).Update), ctx, id, c)
	return &ConnectorServiceUpdateCall{Call: call}
}

// ConnectorServiceUpdateCall wrap *gomock.Call
type ConnectorServiceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c_2 *ConnectorServiceUpdateCall) Return(arg0 *connector.Instance, arg1 error) *ConnectorServiceUpdateCall {
	c_2.Call = c_2.Call.Return(arg0, arg1)
	return c_2
}

// Do rewrite *gomock.Call.Do
func (c_2 *ConnectorServiceUpdateCall) Do(f func(context.Context, string, connector.Config) (*connector.Instance, error)) *ConnectorServiceUpdateCall {
	c_2.Call = c_2.Call.Do(f)
	return c_2
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c_2 *ConnectorServiceUpdateCall) DoAndReturn(f func(context.Context, string, connector.Config) (*connector.Instance, error)) *ConnectorServiceUpdateCall {
	c_2.Call = c_2.Call.DoAndReturn(f)
	return c_2
}

// ProcessorService is a mock of ProcessorService interface.
type ProcessorService struct {
	ctrl     *gomock.Controller
	recorder *ProcessorServiceMockRecorder
	isgomock struct{}
}

// ProcessorServiceMockRecorder is the mock recorder for ProcessorService.
type ProcessorServiceMockRecorder struct {
	mock *ProcessorService
}

// NewProcessorService creates a new mock instance.
func NewProcessorService(ctrl *gomock.Controller) *ProcessorService {
	mock := &ProcessorService{ctrl: ctrl}
	mock.recorder = &ProcessorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ProcessorService) EXPECT() *ProcessorServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *ProcessorService) Create(ctx context.Context, id, plugin string, parent processor.Parent, cfg processor.Config, p processor.ProvisionType, condition string) (*processor.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, id, plugin, parent, cfg, p, condition)
	ret0, _ := ret[0].(*processor.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *ProcessorServiceMockRecorder) Create(ctx, id, plugin, parent, cfg, p, condition any) *ProcessorServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*ProcessorService)(nil).Create), ctx, id, plugin, parent, cfg, p, condition)
	return &ProcessorServiceCreateCall{Call: call}
}

// ProcessorServiceCreateCall wrap *gomock.Call
type ProcessorServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ProcessorServiceCreateCall) Return(arg0 *processor.Instance, arg1 error) *ProcessorServiceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ProcessorServiceCreateCall) Do(f func(context.Context, string, string, processor.Parent, processor.Config, processor.ProvisionType, string) (*processor.Instance, error)) *ProcessorServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ProcessorServiceCreateCall) DoAndReturn(f func(context.Context, string, string, processor.Parent, processor.Config, processor.ProvisionType, string) (*processor.Instance, error)) *ProcessorServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *ProcessorService) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *ProcessorServiceMockRecorder) Delete(ctx, id any) *ProcessorServiceDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*ProcessorService)(nil).Delete), ctx, id)
	return &ProcessorServiceDeleteCall{Call: call}
}

// ProcessorServiceDeleteCall wrap *gomock.Call
type ProcessorServiceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ProcessorServiceDeleteCall) Return(arg0 error) *ProcessorServiceDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ProcessorServiceDeleteCall) Do(f func(context.Context, string) error) *ProcessorServiceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ProcessorServiceDeleteCall) DoAndReturn(f func(context.Context, string) error) *ProcessorServiceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *ProcessorService) Get(ctx context.Context, id string) (*processor.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*processor.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *ProcessorServiceMockRecorder) Get(ctx, id any) *ProcessorServiceGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*ProcessorService)(nil).Get), ctx, id)
	return &ProcessorServiceGetCall{Call: call}
}

// ProcessorServiceGetCall wrap *gomock.Call
type ProcessorServiceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ProcessorServiceGetCall) Return(arg0 *processor.Instance, arg1 error) *ProcessorServiceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ProcessorServiceGetCall) Do(f func(context.Context, string) (*processor.Instance, error)) *ProcessorServiceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ProcessorServiceGetCall) DoAndReturn(f func(context.Context, string) (*processor.Instance, error)) *ProcessorServiceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *ProcessorService) List(ctx context.Context) map[string]*processor.Instance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].(map[string]*processor.Instance)
	return ret0
}

// List indicates an expected call of List.
func (mr *ProcessorServiceMockRecorder) List(ctx any) *ProcessorServiceListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*ProcessorService)(nil).List), ctx)
	return &ProcessorServiceListCall{Call: call}
}

// ProcessorServiceListCall wrap *gomock.Call
type ProcessorServiceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ProcessorServiceListCall) Return(arg0 map[string]*processor.Instance) *ProcessorServiceListCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ProcessorServiceListCall) Do(f func(context.Context) map[string]*processor.Instance) *ProcessorServiceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ProcessorServiceListCall) DoAndReturn(f func(context.Context) map[string]*processor.Instance) *ProcessorServiceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MakeRunnableProcessor mocks base method.
func (m *ProcessorService) MakeRunnableProcessor(ctx context.Context, i *processor.Instance) (*processor.RunnableProcessor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeRunnableProcessor", ctx, i)
	ret0, _ := ret[0].(*processor.RunnableProcessor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeRunnableProcessor indicates an expected call of MakeRunnableProcessor.
func (mr *ProcessorServiceMockRecorder) MakeRunnableProcessor(ctx, i any) *ProcessorServiceMakeRunnableProcessorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeRunnableProcessor", reflect.TypeOf((*ProcessorService)(nil).MakeRunnableProcessor), ctx, i)
	return &ProcessorServiceMakeRunnableProcessorCall{Call: call}
}

// ProcessorServiceMakeRunnableProcessorCall wrap *gomock.Call
type ProcessorServiceMakeRunnableProcessorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ProcessorServiceMakeRunnableProcessorCall) Return(arg0 *processor.RunnableProcessor, arg1 error) *ProcessorServiceMakeRunnableProcessorCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ProcessorServiceMakeRunnableProcessorCall) Do(f func(context.Context, *processor.Instance) (*processor.RunnableProcessor, error)) *ProcessorServiceMakeRunnableProcessorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ProcessorServiceMakeRunnableProcessorCall) DoAndReturn(f func(context.Context, *processor.Instance) (*processor.RunnableProcessor, error)) *ProcessorServiceMakeRunnableProcessorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *ProcessorService) Update(ctx context.Context, id string, cfg processor.Config) (*processor.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, cfg)
	ret0, _ := ret[0].(*processor.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *ProcessorServiceMockRecorder) Update(ctx, id, cfg any) *ProcessorServiceUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*ProcessorService)(nil).Update), ctx, id, cfg)
	return &ProcessorServiceUpdateCall{Call: call}
}

// ProcessorServiceUpdateCall wrap *gomock.Call
type ProcessorServiceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ProcessorServiceUpdateCall) Return(arg0 *processor.Instance, arg1 error) *ProcessorServiceUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ProcessorServiceUpdateCall) Do(f func(context.Context, string, processor.Config) (*processor.Instance, error)) *ProcessorServiceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ProcessorServiceUpdateCall) DoAndReturn(f func(context.Context, string, processor.Config) (*processor.Instance, error)) *ProcessorServiceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ConnectorPluginService is a mock of ConnectorPluginService interface.
type ConnectorPluginService struct {
	ctrl     *gomock.Controller
	recorder *ConnectorPluginServiceMockRecorder
	isgomock struct{}
}

// ConnectorPluginServiceMockRecorder is the mock recorder for ConnectorPluginService.
type ConnectorPluginServiceMockRecorder struct {
	mock *ConnectorPluginService
}

// NewConnectorPluginService creates a new mock instance.
func NewConnectorPluginService(ctrl *gomock.Controller) *ConnectorPluginService {
	mock := &ConnectorPluginService{ctrl: ctrl}
	mock.recorder = &ConnectorPluginServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ConnectorPluginService) EXPECT() *ConnectorPluginServiceMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *ConnectorPluginService) List(ctx context.Context) (map[string]pconnector.Specification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].(map[string]pconnector.Specification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *ConnectorPluginServiceMockRecorder) List(ctx any) *ConnectorPluginServiceListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*ConnectorPluginService)(nil).List), ctx)
	return &ConnectorPluginServiceListCall{Call: call}
}

// ConnectorPluginServiceListCall wrap *gomock.Call
type ConnectorPluginServiceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ConnectorPluginServiceListCall) Return(arg0 map[string]pconnector.Specification, arg1 error) *ConnectorPluginServiceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ConnectorPluginServiceListCall) Do(f func(context.Context) (map[string]pconnector.Specification, error)) *ConnectorPluginServiceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ConnectorPluginServiceListCall) DoAndReturn(f func(context.Context) (map[string]pconnector.Specification, error)) *ConnectorPluginServiceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NewDispenser mocks base method.
func (m *ConnectorPluginService) NewDispenser(logger log.CtxLogger, name, connectorID string) (connector0.Dispenser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDispenser", logger, name, connectorID)
	ret0, _ := ret[0].(connector0.Dispenser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewDispenser indicates an expected call of NewDispenser.
func (mr *ConnectorPluginServiceMockRecorder) NewDispenser(logger, name, connectorID any) *ConnectorPluginServiceNewDispenserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDispenser", reflect.TypeOf((*ConnectorPluginService)(nil).NewDispenser), logger, name, connectorID)
	return &ConnectorPluginServiceNewDispenserCall{Call: call}
}

// ConnectorPluginServiceNewDispenserCall wrap *gomock.Call
type ConnectorPluginServiceNewDispenserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ConnectorPluginServiceNewDispenserCall) Return(arg0 connector0.Dispenser, arg1 error) *ConnectorPluginServiceNewDispenserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ConnectorPluginServiceNewDispenserCall) Do(f func(log.CtxLogger, string, string) (connector0.Dispenser, error)) *ConnectorPluginServiceNewDispenserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ConnectorPluginServiceNewDispenserCall) DoAndReturn(f func(log.CtxLogger, string, string) (connector0.Dispenser, error)) *ConnectorPluginServiceNewDispenserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ValidateDestinationConfig mocks base method.
func (m *ConnectorPluginService) ValidateDestinationConfig(ctx context.Context, name string, settings map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateDestinationConfig", ctx, name, settings)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateDestinationConfig indicates an expected call of ValidateDestinationConfig.
func (mr *ConnectorPluginServiceMockRecorder) ValidateDestinationConfig(ctx, name, settings any) *ConnectorPluginServiceValidateDestinationConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateDestinationConfig", reflect.TypeOf((*ConnectorPluginService)(nil).ValidateDestinationConfig), ctx, name, settings)
	return &ConnectorPluginServiceValidateDestinationConfigCall{Call: call}
}

// ConnectorPluginServiceValidateDestinationConfigCall wrap *gomock.Call
type ConnectorPluginServiceValidateDestinationConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ConnectorPluginServiceValidateDestinationConfigCall) Return(arg0 error) *ConnectorPluginServiceValidateDestinationConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ConnectorPluginServiceValidateDestinationConfigCall) Do(f func(context.Context, string, map[string]string) error) *ConnectorPluginServiceValidateDestinationConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ConnectorPluginServiceValidateDestinationConfigCall) DoAndReturn(f func(context.Context, string, map[string]string) error) *ConnectorPluginServiceValidateDestinationConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ValidateSourceConfig mocks base method.
func (m *ConnectorPluginService) ValidateSourceConfig(ctx context.Context, name string, settings map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateSourceConfig", ctx, name, settings)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateSourceConfig indicates an expected call of ValidateSourceConfig.
func (mr *ConnectorPluginServiceMockRecorder) ValidateSourceConfig(ctx, name, settings any) *ConnectorPluginServiceValidateSourceConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateSourceConfig", reflect.TypeOf((*ConnectorPluginService)(nil).ValidateSourceConfig), ctx, name, settings)
	return &ConnectorPluginServiceValidateSourceConfigCall{Call: call}
}

// ConnectorPluginServiceValidateSourceConfigCall wrap *gomock.Call
type ConnectorPluginServiceValidateSourceConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ConnectorPluginServiceValidateSourceConfigCall) Return(arg0 error) *ConnectorPluginServiceValidateSourceConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ConnectorPluginServiceValidateSourceConfigCall) Do(f func(context.Context, string, map[string]string) error) *ConnectorPluginServiceValidateSourceConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ConnectorPluginServiceValidateSourceConfigCall) DoAndReturn(f func(context.Context, string, map[string]string) error) *ConnectorPluginServiceValidateSourceConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ProcessorPluginService is a mock of ProcessorPluginService interface.
type ProcessorPluginService struct {
	ctrl     *gomock.Controller
	recorder *ProcessorPluginServiceMockRecorder
	isgomock struct{}
}

// ProcessorPluginServiceMockRecorder is the mock recorder for ProcessorPluginService.
type ProcessorPluginServiceMockRecorder struct {
	mock *ProcessorPluginService
}

// NewProcessorPluginService creates a new mock instance.
func NewProcessorPluginService(ctrl *gomock.Controller) *ProcessorPluginService {
	mock := &ProcessorPluginService{ctrl: ctrl}
	mock.recorder = &ProcessorPluginServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ProcessorPluginService) EXPECT() *ProcessorPluginServiceMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *ProcessorPluginService) List(ctx context.Context) (map[string]sdk.Specification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].(map[string]sdk.Specification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *ProcessorPluginServiceMockRecorder) List(ctx any) *ProcessorPluginServiceListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*ProcessorPluginService)(nil).List), ctx)
	return &ProcessorPluginServiceListCall{Call: call}
}

// ProcessorPluginServiceListCall wrap *gomock.Call
type ProcessorPluginServiceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ProcessorPluginServiceListCall) Return(arg0 map[string]sdk.Specification, arg1 error) *ProcessorPluginServiceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ProcessorPluginServiceListCall) Do(f func(context.Context) (map[string]sdk.Specification, error)) *ProcessorPluginServiceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ProcessorPluginServiceListCall) DoAndReturn(f func(context.Context) (map[string]sdk.Specification, error)) *ProcessorPluginServiceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NewProcessor mocks base method.
func (m *ProcessorPluginService) NewProcessor(ctx context.Context, pluginName, id string) (sdk.Processor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewProcessor", ctx, pluginName, id)
	ret0, _ := ret[0].(sdk.Processor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewProcessor indicates an expected call of NewProcessor.
func (mr *ProcessorPluginServiceMockRecorder) NewProcessor(ctx, pluginName, id any) *ProcessorPluginServiceNewProcessorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewProcessor", reflect.TypeOf((*ProcessorPluginService)(nil).NewProcessor), ctx, pluginName, id)
	return &ProcessorPluginServiceNewProcessorCall{Call: call}
}

// ProcessorPluginServiceNewProcessorCall wrap *gomock.Call
type ProcessorPluginServiceNewProcessorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ProcessorPluginServiceNewProcessorCall) Return(arg0 sdk.Processor, arg1 error) *ProcessorPluginServiceNewProcessorCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ProcessorPluginServiceNewProcessorCall) Do(f func(context.Context, string, string) (sdk.Processor, error)) *ProcessorPluginServiceNewProcessorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ProcessorPluginServiceNewProcessorCall) DoAndReturn(f func(context.Context, string, string) (sdk.Processor, error)) *ProcessorPluginServiceNewProcessorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RegisterStandalonePlugin mocks base method.
func (m *ProcessorPluginService) RegisterStandalonePlugin(ctx context.Context, path string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterStandalonePlugin", ctx, path)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterStandalonePlugin indicates an expected call of RegisterStandalonePlugin.
func (mr *ProcessorPluginServiceMockRecorder) RegisterStandalonePlugin(ctx, path any) *ProcessorPluginServiceRegisterStandalonePluginCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterStandalonePlugin", reflect.TypeOf((*ProcessorPluginService)(nil).RegisterStandalonePlugin), ctx, path)
	return &ProcessorPluginServiceRegisterStandalonePluginCall{Call: call}
}

// ProcessorPluginServiceRegisterStandalonePluginCall wrap *gomock.Call
type ProcessorPluginServiceRegisterStandalonePluginCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ProcessorPluginServiceRegisterStandalonePluginCall) Return(arg0 string, arg1 error) *ProcessorPluginServiceRegisterStandalonePluginCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ProcessorPluginServiceRegisterStandalonePluginCall) Do(f func(context.Context, string) (string, error)) *ProcessorPluginServiceRegisterStandalonePluginCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ProcessorPluginServiceRegisterStandalonePluginCall) DoAndReturn(f func(context.Context, string) (string, error)) *ProcessorPluginServiceRegisterStandalonePluginCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LifecycleService is a mock of LifecycleService interface.
type LifecycleService struct {
	ctrl     *gomock.Controller
	recorder *LifecycleServiceMockRecorder
	isgomock struct{}
}

// LifecycleServiceMockRecorder is the mock recorder for LifecycleService.
type LifecycleServiceMockRecorder struct {
	mock *LifecycleService
}

// NewLifecycleService creates a new mock instance.
func NewLifecycleService(ctrl *gomock.Controller) *LifecycleService {
	mock := &LifecycleService{ctrl: ctrl}
	mock.recorder = &LifecycleServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *LifecycleService) EXPECT() *LifecycleServiceMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *LifecycleService) Start(ctx context.Context, pipelineID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, pipelineID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *LifecycleServiceMockRecorder) Start(ctx, pipelineID any) *LifecycleServiceStartCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*LifecycleService)(nil).Start), ctx, pipelineID)
	return &LifecycleServiceStartCall{Call: call}
}

// LifecycleServiceStartCall wrap *gomock.Call
type LifecycleServiceStartCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *LifecycleServiceStartCall) Return(arg0 error) *LifecycleServiceStartCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *LifecycleServiceStartCall) Do(f func(context.Context, string) error) *LifecycleServiceStartCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *LifecycleServiceStartCall) DoAndReturn(f func(context.Context, string) error) *LifecycleServiceStartCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Stop mocks base method.
func (m *LifecycleService) Stop(ctx context.Context, pipelineID string, force bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", ctx, pipelineID, force)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *LifecycleServiceMockRecorder) Stop(ctx, pipelineID, force any) *LifecycleServiceStopCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*LifecycleService)(nil).Stop), ctx, pipelineID, force)
	return &LifecycleServiceStopCall{Call: call}
}

// LifecycleServiceStopCall wrap *gomock.Call
type LifecycleServiceStopCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *LifecycleServiceStopCall) Return(arg0 error) *LifecycleServiceStopCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *LifecycleServiceStopCall) Do(f func(context.Context, string, bool) error) *LifecycleServiceStopCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *LifecycleServiceStopCall) DoAndReturn(f func(context.Context, string, bool) error) *LifecycleServiceStopCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
