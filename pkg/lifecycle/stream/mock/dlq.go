// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/conduitio/conduit/pkg/lifecycle/stream (interfaces: DLQHandler)
//
// Generated by this command:
//
//	mockgen -typed -destination=mock/dlq.go -package=mock -mock_names=DLQHandler=DLQHandler . DLQHandler
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	opencdc "github.com/conduitio/conduit-commons/opencdc"
	gomock "go.uber.org/mock/gomock"
)

// DLQHandler is a mock of DLQHandler interface.
type DLQHandler struct {
	ctrl     *gomock.Controller
	recorder *DLQHandlerMockRecorder
	isgomock struct{}
}

// DLQHandlerMockRecorder is the mock recorder for DLQHandler.
type DLQHandlerMockRecorder struct {
	mock *DLQHandler
}

// NewDLQHandler creates a new mock instance.
func NewDLQHandler(ctrl *gomock.Controller) *DLQHandler {
	mock := &DLQHandler{ctrl: ctrl}
	mock.recorder = &DLQHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *DLQHandler) EXPECT() *DLQHandlerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *DLQHandler) Close(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *DLQHandlerMockRecorder) Close(arg0 any) *DLQHandlerCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*DLQHandler)(nil).Close), arg0)
	return &DLQHandlerCloseCall{Call: call}
}

// DLQHandlerCloseCall wrap *gomock.Call
type DLQHandlerCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *DLQHandlerCloseCall) Return(arg0 error) *DLQHandlerCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *DLQHandlerCloseCall) Do(f func(context.Context) error) *DLQHandlerCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *DLQHandlerCloseCall) DoAndReturn(f func(context.Context) error) *DLQHandlerCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Open mocks base method.
func (m *DLQHandler) Open(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open.
func (mr *DLQHandlerMockRecorder) Open(arg0 any) *DLQHandlerOpenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*DLQHandler)(nil).Open), arg0)
	return &DLQHandlerOpenCall{Call: call}
}

// DLQHandlerOpenCall wrap *gomock.Call
type DLQHandlerOpenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *DLQHandlerOpenCall) Return(arg0 error) *DLQHandlerOpenCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *DLQHandlerOpenCall) Do(f func(context.Context) error) *DLQHandlerOpenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *DLQHandlerOpenCall) DoAndReturn(f func(context.Context) error) *DLQHandlerOpenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Write mocks base method.
func (m *DLQHandler) Write(arg0 context.Context, arg1 opencdc.Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *DLQHandlerMockRecorder) Write(arg0, arg1 any) *DLQHandlerWriteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*DLQHandler)(nil).Write), arg0, arg1)
	return &DLQHandlerWriteCall{Call: call}
}

// DLQHandlerWriteCall wrap *gomock.Call
type DLQHandlerWriteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *DLQHandlerWriteCall) Return(arg0 error) *DLQHandlerWriteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *DLQHandlerWriteCall) Do(f func(context.Context, opencdc.Record) error) *DLQHandlerWriteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *DLQHandlerWriteCall) DoAndReturn(f func(context.Context, opencdc.Record) error) *DLQHandlerWriteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
