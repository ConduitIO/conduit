// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/conduitio/conduit/pkg/pipeline/stream (interfaces: Source)
//
// Generated by this command:
//
//	mockgen -typed -destination=mock/source.go -package=mock -mock_names=Source=Source . Source
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	opencdc "github.com/conduitio/conduit-commons/opencdc"
	gomock "go.uber.org/mock/gomock"
)

// Source is a mock of Source interface.
type Source struct {
	ctrl     *gomock.Controller
	recorder *SourceMockRecorder
}

// SourceMockRecorder is the mock recorder for Source.
type SourceMockRecorder struct {
	mock *Source
}

// NewSource creates a new mock instance.
func NewSource(ctrl *gomock.Controller) *Source {
	mock := &Source{ctrl: ctrl}
	mock.recorder = &SourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Source) EXPECT() *SourceMockRecorder {
	return m.recorder
}

// Ack mocks base method.
func (m *Source) Ack(arg0 context.Context, arg1 []opencdc.Position) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ack", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ack indicates an expected call of Ack.
func (mr *SourceMockRecorder) Ack(arg0, arg1 any) *SourceAckCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ack", reflect.TypeOf((*Source)(nil).Ack), arg0, arg1)
	return &SourceAckCall{Call: call}
}

// SourceAckCall wrap *gomock.Call
type SourceAckCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *SourceAckCall) Return(arg0 error) *SourceAckCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *SourceAckCall) Do(f func(context.Context, []opencdc.Position) error) *SourceAckCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *SourceAckCall) DoAndReturn(f func(context.Context, []opencdc.Position) error) *SourceAckCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Errors mocks base method.
func (m *Source) Errors() <-chan error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Errors")
	ret0, _ := ret[0].(<-chan error)
	return ret0
}

// Errors indicates an expected call of Errors.
func (mr *SourceMockRecorder) Errors() *SourceErrorsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errors", reflect.TypeOf((*Source)(nil).Errors))
	return &SourceErrorsCall{Call: call}
}

// SourceErrorsCall wrap *gomock.Call
type SourceErrorsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *SourceErrorsCall) Return(arg0 <-chan error) *SourceErrorsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *SourceErrorsCall) Do(f func() <-chan error) *SourceErrorsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *SourceErrorsCall) DoAndReturn(f func() <-chan error) *SourceErrorsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ID mocks base method.
func (m *Source) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *SourceMockRecorder) ID() *SourceIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*Source)(nil).ID))
	return &SourceIDCall{Call: call}
}

// SourceIDCall wrap *gomock.Call
type SourceIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *SourceIDCall) Return(arg0 string) *SourceIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *SourceIDCall) Do(f func() string) *SourceIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *SourceIDCall) DoAndReturn(f func() string) *SourceIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Open mocks base method.
func (m *Source) Open(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open.
func (mr *SourceMockRecorder) Open(arg0 any) *SourceOpenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*Source)(nil).Open), arg0)
	return &SourceOpenCall{Call: call}
}

// SourceOpenCall wrap *gomock.Call
type SourceOpenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *SourceOpenCall) Return(arg0 error) *SourceOpenCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *SourceOpenCall) Do(f func(context.Context) error) *SourceOpenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *SourceOpenCall) DoAndReturn(f func(context.Context) error) *SourceOpenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Read mocks base method.
func (m *Source) Read(arg0 context.Context) ([]opencdc.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].([]opencdc.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *SourceMockRecorder) Read(arg0 any) *SourceReadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*Source)(nil).Read), arg0)
	return &SourceReadCall{Call: call}
}

// SourceReadCall wrap *gomock.Call
type SourceReadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *SourceReadCall) Return(arg0 []opencdc.Record, arg1 error) *SourceReadCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *SourceReadCall) Do(f func(context.Context) ([]opencdc.Record, error)) *SourceReadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *SourceReadCall) DoAndReturn(f func(context.Context) ([]opencdc.Record, error)) *SourceReadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Stop mocks base method.
func (m *Source) Stop(arg0 context.Context) (opencdc.Position, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", arg0)
	ret0, _ := ret[0].(opencdc.Position)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stop indicates an expected call of Stop.
func (mr *SourceMockRecorder) Stop(arg0 any) *SourceStopCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*Source)(nil).Stop), arg0)
	return &SourceStopCall{Call: call}
}

// SourceStopCall wrap *gomock.Call
type SourceStopCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *SourceStopCall) Return(arg0 opencdc.Position, arg1 error) *SourceStopCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *SourceStopCall) Do(f func(context.Context) (opencdc.Position, error)) *SourceStopCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *SourceStopCall) DoAndReturn(f func(context.Context) (opencdc.Position, error)) *SourceStopCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Teardown mocks base method.
func (m *Source) Teardown(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Teardown", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Teardown indicates an expected call of Teardown.
func (mr *SourceMockRecorder) Teardown(arg0 any) *SourceTeardownCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Teardown", reflect.TypeOf((*Source)(nil).Teardown), arg0)
	return &SourceTeardownCall{Call: call}
}

// SourceTeardownCall wrap *gomock.Call
type SourceTeardownCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *SourceTeardownCall) Return(arg0 error) *SourceTeardownCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *SourceTeardownCall) Do(f func(context.Context) error) *SourceTeardownCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *SourceTeardownCall) DoAndReturn(f func(context.Context) error) *SourceTeardownCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
