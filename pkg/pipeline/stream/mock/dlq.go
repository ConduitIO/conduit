// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/conduitio/conduit/pkg/pipeline/stream (interfaces: DLQHandler)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	record "github.com/conduitio/conduit/pkg/record"
	gomock "go.uber.org/mock/gomock"
)

// DLQHandler is a mock of DLQHandler interface.
type DLQHandler struct {
	ctrl     *gomock.Controller
	recorder *DLQHandlerMockRecorder
}

// DLQHandlerMockRecorder is the mock recorder for DLQHandler.
type DLQHandlerMockRecorder struct {
	mock *DLQHandler
}

// NewDLQHandler creates a new mock instance.
func NewDLQHandler(ctrl *gomock.Controller) *DLQHandler {
	mock := &DLQHandler{ctrl: ctrl}
	mock.recorder = &DLQHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *DLQHandler) EXPECT() *DLQHandlerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *DLQHandler) Close(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *DLQHandlerMockRecorder) Close(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*DLQHandler)(nil).Close), arg0)
}

// Open mocks base method.
func (m *DLQHandler) Open(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open.
func (mr *DLQHandlerMockRecorder) Open(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*DLQHandler)(nil).Open), arg0)
}

// Write mocks base method.
func (m *DLQHandler) Write(arg0 context.Context, arg1 record.Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *DLQHandlerMockRecorder) Write(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*DLQHandler)(nil).Write), arg0, arg1)
}
