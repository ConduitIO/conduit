// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/conduitio/conduit/pkg/web/api (interfaces: ConnectorPluginOrchestrator)
//
// Generated by this command:
//
//	mockgen -destination=mock/connector_plugin.go -package=mock -mock_names=ConnectorPluginOrchestrator=ConnectorPluginOrchestrator . ConnectorPluginOrchestrator
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	connector "github.com/conduitio/conduit/pkg/plugin/connector"
	gomock "go.uber.org/mock/gomock"
)

// ConnectorPluginOrchestrator is a mock of ConnectorPluginOrchestrator interface.
type ConnectorPluginOrchestrator struct {
	ctrl     *gomock.Controller
	recorder *ConnectorPluginOrchestratorMockRecorder
}

// ConnectorPluginOrchestratorMockRecorder is the mock recorder for ConnectorPluginOrchestrator.
type ConnectorPluginOrchestratorMockRecorder struct {
	mock *ConnectorPluginOrchestrator
}

// NewConnectorPluginOrchestrator creates a new mock instance.
func NewConnectorPluginOrchestrator(ctrl *gomock.Controller) *ConnectorPluginOrchestrator {
	mock := &ConnectorPluginOrchestrator{ctrl: ctrl}
	mock.recorder = &ConnectorPluginOrchestratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ConnectorPluginOrchestrator) EXPECT() *ConnectorPluginOrchestratorMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *ConnectorPluginOrchestrator) List(arg0 context.Context) (map[string]connector.Specification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].(map[string]connector.Specification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *ConnectorPluginOrchestratorMockRecorder) List(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*ConnectorPluginOrchestrator)(nil).List), arg0)
}
