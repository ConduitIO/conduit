// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/conduitio/conduit/pkg/web/api (interfaces: ProcessorPluginOrchestrator)
//
// Generated by this command:
//
//	mockgen -destination=mock/processor_plugin.go -package=mock -mock_names=ProcessorPluginOrchestrator=ProcessorPluginOrchestrator . ProcessorPluginOrchestrator
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	sdk "github.com/conduitio/conduit-processor-sdk"
	gomock "go.uber.org/mock/gomock"
)

// ProcessorPluginOrchestrator is a mock of ProcessorPluginOrchestrator interface.
type ProcessorPluginOrchestrator struct {
	ctrl     *gomock.Controller
	recorder *ProcessorPluginOrchestratorMockRecorder
}

// ProcessorPluginOrchestratorMockRecorder is the mock recorder for ProcessorPluginOrchestrator.
type ProcessorPluginOrchestratorMockRecorder struct {
	mock *ProcessorPluginOrchestrator
}

// NewProcessorPluginOrchestrator creates a new mock instance.
func NewProcessorPluginOrchestrator(ctrl *gomock.Controller) *ProcessorPluginOrchestrator {
	mock := &ProcessorPluginOrchestrator{ctrl: ctrl}
	mock.recorder = &ProcessorPluginOrchestratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ProcessorPluginOrchestrator) EXPECT() *ProcessorPluginOrchestratorMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *ProcessorPluginOrchestrator) List(arg0 context.Context) (map[string]sdk.Specification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].(map[string]sdk.Specification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *ProcessorPluginOrchestratorMockRecorder) List(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*ProcessorPluginOrchestrator)(nil).List), arg0)
}
