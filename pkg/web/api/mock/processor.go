// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/conduitio/conduit/pkg/web/api (interfaces: ProcessorOrchestrator)
//
// Generated by this command:
//
//	mockgen -typed -destination=mock/processor.go -package=mock -mock_names=ProcessorOrchestrator=ProcessorOrchestrator . ProcessorOrchestrator
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	inspector "github.com/conduitio/conduit/pkg/inspector"
	processor "github.com/conduitio/conduit/pkg/processor"
	gomock "go.uber.org/mock/gomock"
)

// ProcessorOrchestrator is a mock of ProcessorOrchestrator interface.
type ProcessorOrchestrator struct {
	ctrl     *gomock.Controller
	recorder *ProcessorOrchestratorMockRecorder
}

// ProcessorOrchestratorMockRecorder is the mock recorder for ProcessorOrchestrator.
type ProcessorOrchestratorMockRecorder struct {
	mock *ProcessorOrchestrator
}

// NewProcessorOrchestrator creates a new mock instance.
func NewProcessorOrchestrator(ctrl *gomock.Controller) *ProcessorOrchestrator {
	mock := &ProcessorOrchestrator{ctrl: ctrl}
	mock.recorder = &ProcessorOrchestratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ProcessorOrchestrator) EXPECT() *ProcessorOrchestratorMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *ProcessorOrchestrator) Create(arg0 context.Context, arg1 string, arg2 processor.Parent, arg3 processor.Config, arg4 string) (*processor.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*processor.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *ProcessorOrchestratorMockRecorder) Create(arg0, arg1, arg2, arg3, arg4 any) *ProcessorOrchestratorCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*ProcessorOrchestrator)(nil).Create), arg0, arg1, arg2, arg3, arg4)
	return &ProcessorOrchestratorCreateCall{Call: call}
}

// ProcessorOrchestratorCreateCall wrap *gomock.Call
type ProcessorOrchestratorCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ProcessorOrchestratorCreateCall) Return(arg0 *processor.Instance, arg1 error) *ProcessorOrchestratorCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ProcessorOrchestratorCreateCall) Do(f func(context.Context, string, processor.Parent, processor.Config, string) (*processor.Instance, error)) *ProcessorOrchestratorCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ProcessorOrchestratorCreateCall) DoAndReturn(f func(context.Context, string, processor.Parent, processor.Config, string) (*processor.Instance, error)) *ProcessorOrchestratorCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *ProcessorOrchestrator) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *ProcessorOrchestratorMockRecorder) Delete(arg0, arg1 any) *ProcessorOrchestratorDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*ProcessorOrchestrator)(nil).Delete), arg0, arg1)
	return &ProcessorOrchestratorDeleteCall{Call: call}
}

// ProcessorOrchestratorDeleteCall wrap *gomock.Call
type ProcessorOrchestratorDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ProcessorOrchestratorDeleteCall) Return(arg0 error) *ProcessorOrchestratorDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ProcessorOrchestratorDeleteCall) Do(f func(context.Context, string) error) *ProcessorOrchestratorDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ProcessorOrchestratorDeleteCall) DoAndReturn(f func(context.Context, string) error) *ProcessorOrchestratorDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *ProcessorOrchestrator) Get(arg0 context.Context, arg1 string) (*processor.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*processor.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *ProcessorOrchestratorMockRecorder) Get(arg0, arg1 any) *ProcessorOrchestratorGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*ProcessorOrchestrator)(nil).Get), arg0, arg1)
	return &ProcessorOrchestratorGetCall{Call: call}
}

// ProcessorOrchestratorGetCall wrap *gomock.Call
type ProcessorOrchestratorGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ProcessorOrchestratorGetCall) Return(arg0 *processor.Instance, arg1 error) *ProcessorOrchestratorGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ProcessorOrchestratorGetCall) Do(f func(context.Context, string) (*processor.Instance, error)) *ProcessorOrchestratorGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ProcessorOrchestratorGetCall) DoAndReturn(f func(context.Context, string) (*processor.Instance, error)) *ProcessorOrchestratorGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InspectIn mocks base method.
func (m *ProcessorOrchestrator) InspectIn(arg0 context.Context, arg1 string) (*inspector.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InspectIn", arg0, arg1)
	ret0, _ := ret[0].(*inspector.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InspectIn indicates an expected call of InspectIn.
func (mr *ProcessorOrchestratorMockRecorder) InspectIn(arg0, arg1 any) *ProcessorOrchestratorInspectInCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InspectIn", reflect.TypeOf((*ProcessorOrchestrator)(nil).InspectIn), arg0, arg1)
	return &ProcessorOrchestratorInspectInCall{Call: call}
}

// ProcessorOrchestratorInspectInCall wrap *gomock.Call
type ProcessorOrchestratorInspectInCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ProcessorOrchestratorInspectInCall) Return(arg0 *inspector.Session, arg1 error) *ProcessorOrchestratorInspectInCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ProcessorOrchestratorInspectInCall) Do(f func(context.Context, string) (*inspector.Session, error)) *ProcessorOrchestratorInspectInCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ProcessorOrchestratorInspectInCall) DoAndReturn(f func(context.Context, string) (*inspector.Session, error)) *ProcessorOrchestratorInspectInCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InspectOut mocks base method.
func (m *ProcessorOrchestrator) InspectOut(arg0 context.Context, arg1 string) (*inspector.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InspectOut", arg0, arg1)
	ret0, _ := ret[0].(*inspector.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InspectOut indicates an expected call of InspectOut.
func (mr *ProcessorOrchestratorMockRecorder) InspectOut(arg0, arg1 any) *ProcessorOrchestratorInspectOutCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InspectOut", reflect.TypeOf((*ProcessorOrchestrator)(nil).InspectOut), arg0, arg1)
	return &ProcessorOrchestratorInspectOutCall{Call: call}
}

// ProcessorOrchestratorInspectOutCall wrap *gomock.Call
type ProcessorOrchestratorInspectOutCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ProcessorOrchestratorInspectOutCall) Return(arg0 *inspector.Session, arg1 error) *ProcessorOrchestratorInspectOutCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ProcessorOrchestratorInspectOutCall) Do(f func(context.Context, string) (*inspector.Session, error)) *ProcessorOrchestratorInspectOutCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ProcessorOrchestratorInspectOutCall) DoAndReturn(f func(context.Context, string) (*inspector.Session, error)) *ProcessorOrchestratorInspectOutCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *ProcessorOrchestrator) List(arg0 context.Context) map[string]*processor.Instance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].(map[string]*processor.Instance)
	return ret0
}

// List indicates an expected call of List.
func (mr *ProcessorOrchestratorMockRecorder) List(arg0 any) *ProcessorOrchestratorListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*ProcessorOrchestrator)(nil).List), arg0)
	return &ProcessorOrchestratorListCall{Call: call}
}

// ProcessorOrchestratorListCall wrap *gomock.Call
type ProcessorOrchestratorListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ProcessorOrchestratorListCall) Return(arg0 map[string]*processor.Instance) *ProcessorOrchestratorListCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ProcessorOrchestratorListCall) Do(f func(context.Context) map[string]*processor.Instance) *ProcessorOrchestratorListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ProcessorOrchestratorListCall) DoAndReturn(f func(context.Context) map[string]*processor.Instance) *ProcessorOrchestratorListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *ProcessorOrchestrator) Update(arg0 context.Context, arg1 string, arg2 processor.Config) (*processor.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*processor.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *ProcessorOrchestratorMockRecorder) Update(arg0, arg1, arg2 any) *ProcessorOrchestratorUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*ProcessorOrchestrator)(nil).Update), arg0, arg1, arg2)
	return &ProcessorOrchestratorUpdateCall{Call: call}
}

// ProcessorOrchestratorUpdateCall wrap *gomock.Call
type ProcessorOrchestratorUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ProcessorOrchestratorUpdateCall) Return(arg0 *processor.Instance, arg1 error) *ProcessorOrchestratorUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ProcessorOrchestratorUpdateCall) Do(f func(context.Context, string, processor.Config) (*processor.Instance, error)) *ProcessorOrchestratorUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ProcessorOrchestratorUpdateCall) DoAndReturn(f func(context.Context, string, processor.Config) (*processor.Instance, error)) *ProcessorOrchestratorUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
