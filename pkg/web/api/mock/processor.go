// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/conduitio/conduit/pkg/web/api (interfaces: ProcessorOrchestrator)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	processor "github.com/conduitio/conduit/pkg/processor"
	gomock "github.com/golang/mock/gomock"
)

// ProcessorOrchestrator is a mock of ProcessorOrchestrator interface.
type ProcessorOrchestrator struct {
	ctrl     *gomock.Controller
	recorder *ProcessorOrchestratorMockRecorder
}

// ProcessorOrchestratorMockRecorder is the mock recorder for ProcessorOrchestrator.
type ProcessorOrchestratorMockRecorder struct {
	mock *ProcessorOrchestrator
}

// NewProcessorOrchestrator creates a new mock instance.
func NewProcessorOrchestrator(ctrl *gomock.Controller) *ProcessorOrchestrator {
	mock := &ProcessorOrchestrator{ctrl: ctrl}
	mock.recorder = &ProcessorOrchestratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ProcessorOrchestrator) EXPECT() *ProcessorOrchestratorMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *ProcessorOrchestrator) Create(arg0 context.Context, arg1 string, arg2 processor.Parent, arg3 processor.Config) (*processor.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*processor.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *ProcessorOrchestratorMockRecorder) Create(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*ProcessorOrchestrator)(nil).Create), arg0, arg1, arg2, arg3)
}

// Delete mocks base method.
func (m *ProcessorOrchestrator) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *ProcessorOrchestratorMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*ProcessorOrchestrator)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *ProcessorOrchestrator) Get(arg0 context.Context, arg1 string) (*processor.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*processor.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *ProcessorOrchestratorMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*ProcessorOrchestrator)(nil).Get), arg0, arg1)
}

// List mocks base method.
func (m *ProcessorOrchestrator) List(arg0 context.Context) map[string]*processor.Instance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].(map[string]*processor.Instance)
	return ret0
}

// List indicates an expected call of List.
func (mr *ProcessorOrchestratorMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*ProcessorOrchestrator)(nil).List), arg0)
}

// Update mocks base method.
func (m *ProcessorOrchestrator) Update(arg0 context.Context, arg1 string, arg2 processor.Config) (*processor.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*processor.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *ProcessorOrchestratorMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*ProcessorOrchestrator)(nil).Update), arg0, arg1, arg2)
}
