// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/conduitio/conduit/pkg/web/api (interfaces: ConnectorOrchestrator)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	connector "github.com/conduitio/conduit/pkg/connector"
	inspector "github.com/conduitio/conduit/pkg/inspector"
	gomock "go.uber.org/mock/gomock"
)

// ConnectorOrchestrator is a mock of ConnectorOrchestrator interface.
type ConnectorOrchestrator struct {
	ctrl     *gomock.Controller
	recorder *ConnectorOrchestratorMockRecorder
}

// ConnectorOrchestratorMockRecorder is the mock recorder for ConnectorOrchestrator.
type ConnectorOrchestratorMockRecorder struct {
	mock *ConnectorOrchestrator
}

// NewConnectorOrchestrator creates a new mock instance.
func NewConnectorOrchestrator(ctrl *gomock.Controller) *ConnectorOrchestrator {
	mock := &ConnectorOrchestrator{ctrl: ctrl}
	mock.recorder = &ConnectorOrchestratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ConnectorOrchestrator) EXPECT() *ConnectorOrchestratorMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *ConnectorOrchestrator) Create(arg0 context.Context, arg1 connector.Type, arg2, arg3 string, arg4 connector.Config) (*connector.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*connector.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *ConnectorOrchestratorMockRecorder) Create(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*ConnectorOrchestrator)(nil).Create), arg0, arg1, arg2, arg3, arg4)
}

// Delete mocks base method.
func (m *ConnectorOrchestrator) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *ConnectorOrchestratorMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*ConnectorOrchestrator)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *ConnectorOrchestrator) Get(arg0 context.Context, arg1 string) (*connector.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*connector.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *ConnectorOrchestratorMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*ConnectorOrchestrator)(nil).Get), arg0, arg1)
}

// Inspect mocks base method.
func (m *ConnectorOrchestrator) Inspect(arg0 context.Context, arg1 string) (*inspector.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Inspect", arg0, arg1)
	ret0, _ := ret[0].(*inspector.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Inspect indicates an expected call of Inspect.
func (mr *ConnectorOrchestratorMockRecorder) Inspect(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inspect", reflect.TypeOf((*ConnectorOrchestrator)(nil).Inspect), arg0, arg1)
}

// List mocks base method.
func (m *ConnectorOrchestrator) List(arg0 context.Context) map[string]*connector.Instance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].(map[string]*connector.Instance)
	return ret0
}

// List indicates an expected call of List.
func (mr *ConnectorOrchestratorMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*ConnectorOrchestrator)(nil).List), arg0)
}

// Update mocks base method.
func (m *ConnectorOrchestrator) Update(arg0 context.Context, arg1 string, arg2 connector.Config) (*connector.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*connector.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *ConnectorOrchestratorMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*ConnectorOrchestrator)(nil).Update), arg0, arg1, arg2)
}

// Validate mocks base method.
func (m *ConnectorOrchestrator) Validate(arg0 context.Context, arg1 connector.Type, arg2 string, arg3 connector.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *ConnectorOrchestratorMockRecorder) Validate(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*ConnectorOrchestrator)(nil).Validate), arg0, arg1, arg2, arg3)
}
