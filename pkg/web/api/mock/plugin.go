// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/conduitio/conduit/pkg/web/api (interfaces: PluginOrchestrator)
//
// Generated by this command:
//
//	mockgen -destination=mock/plugin.go -package=mock -mock_names=PluginOrchestrator=PluginOrchestrator . PluginOrchestrator
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	connector "github.com/conduitio/conduit/pkg/plugin/connector"
	gomock "go.uber.org/mock/gomock"
)

// PluginOrchestrator is a mock of PluginOrchestrator interface.
type PluginOrchestrator struct {
	ctrl     *gomock.Controller
	recorder *PluginOrchestratorMockRecorder
}

// PluginOrchestratorMockRecorder is the mock recorder for PluginOrchestrator.
type PluginOrchestratorMockRecorder struct {
	mock *PluginOrchestrator
}

// NewPluginOrchestrator creates a new mock instance.
func NewPluginOrchestrator(ctrl *gomock.Controller) *PluginOrchestrator {
	mock := &PluginOrchestrator{ctrl: ctrl}
	mock.recorder = &PluginOrchestratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *PluginOrchestrator) EXPECT() *PluginOrchestratorMockRecorder {
	return m.recorder
}

// ListConnectors mocks base method.
func (m *PluginOrchestrator) ListConnectors(arg0 context.Context) (map[string]connector.Specification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConnectors", arg0)
	ret0, _ := ret[0].(map[string]connector.Specification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConnectors indicates an expected call of ListConnectors.
func (mr *PluginOrchestratorMockRecorder) ListConnectors(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnectors", reflect.TypeOf((*PluginOrchestrator)(nil).ListConnectors), arg0)
}
