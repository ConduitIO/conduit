// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/conduitio/conduit/pkg/provisioning (interfaces: PipelineService,ConnectorService,ProcessorService)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	connector "github.com/conduitio/conduit/pkg/connector"
	pipeline "github.com/conduitio/conduit/pkg/pipeline"
	processor "github.com/conduitio/conduit/pkg/processor"
	gomock "github.com/golang/mock/gomock"
)

// PipelineService is a mock of PipelineService interface.
type PipelineService struct {
	ctrl     *gomock.Controller
	recorder *PipelineServiceMockRecorder
}

// PipelineServiceMockRecorder is the mock recorder for PipelineService.
type PipelineServiceMockRecorder struct {
	mock *PipelineService
}

// NewPipelineService creates a new mock instance.
func NewPipelineService(ctrl *gomock.Controller) *PipelineService {
	mock := &PipelineService{ctrl: ctrl}
	mock.recorder = &PipelineServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *PipelineService) EXPECT() *PipelineServiceMockRecorder {
	return m.recorder
}

// AddConnector mocks base method.
func (m *PipelineService) AddConnector(arg0 context.Context, arg1, arg2 string) (*pipeline.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddConnector", arg0, arg1, arg2)
	ret0, _ := ret[0].(*pipeline.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddConnector indicates an expected call of AddConnector.
func (mr *PipelineServiceMockRecorder) AddConnector(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddConnector", reflect.TypeOf((*PipelineService)(nil).AddConnector), arg0, arg1, arg2)
}

// AddProcessor mocks base method.
func (m *PipelineService) AddProcessor(arg0 context.Context, arg1, arg2 string) (*pipeline.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProcessor", arg0, arg1, arg2)
	ret0, _ := ret[0].(*pipeline.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProcessor indicates an expected call of AddProcessor.
func (mr *PipelineServiceMockRecorder) AddProcessor(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProcessor", reflect.TypeOf((*PipelineService)(nil).AddProcessor), arg0, arg1, arg2)
}

// Create mocks base method.
func (m *PipelineService) Create(arg0 context.Context, arg1 string, arg2 pipeline.Config, arg3 pipeline.ProvisionType) (*pipeline.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*pipeline.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *PipelineServiceMockRecorder) Create(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*PipelineService)(nil).Create), arg0, arg1, arg2, arg3)
}

// Delete mocks base method.
func (m *PipelineService) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *PipelineServiceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*PipelineService)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *PipelineService) Get(arg0 context.Context, arg1 string) (*pipeline.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*pipeline.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *PipelineServiceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*PipelineService)(nil).Get), arg0, arg1)
}

// List mocks base method.
func (m *PipelineService) List(arg0 context.Context) map[string]*pipeline.Instance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].(map[string]*pipeline.Instance)
	return ret0
}

// List indicates an expected call of List.
func (mr *PipelineServiceMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*PipelineService)(nil).List), arg0)
}

// RemoveConnector mocks base method.
func (m *PipelineService) RemoveConnector(arg0 context.Context, arg1, arg2 string) (*pipeline.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveConnector", arg0, arg1, arg2)
	ret0, _ := ret[0].(*pipeline.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveConnector indicates an expected call of RemoveConnector.
func (mr *PipelineServiceMockRecorder) RemoveConnector(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveConnector", reflect.TypeOf((*PipelineService)(nil).RemoveConnector), arg0, arg1, arg2)
}

// RemoveProcessor mocks base method.
func (m *PipelineService) RemoveProcessor(arg0 context.Context, arg1, arg2 string) (*pipeline.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveProcessor", arg0, arg1, arg2)
	ret0, _ := ret[0].(*pipeline.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveProcessor indicates an expected call of RemoveProcessor.
func (mr *PipelineServiceMockRecorder) RemoveProcessor(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveProcessor", reflect.TypeOf((*PipelineService)(nil).RemoveProcessor), arg0, arg1, arg2)
}

// Start mocks base method.
func (m *PipelineService) Start(arg0 context.Context, arg1 pipeline.ConnectorFetcher, arg2 pipeline.ProcessorFetcher, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *PipelineServiceMockRecorder) Start(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*PipelineService)(nil).Start), arg0, arg1, arg2, arg3)
}

// Stop mocks base method.
func (m *PipelineService) Stop(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *PipelineServiceMockRecorder) Stop(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*PipelineService)(nil).Stop), arg0, arg1)
}

// UpdateDLQ mocks base method.
func (m *PipelineService) UpdateDLQ(arg0 context.Context, arg1 string, arg2 pipeline.DLQ) (*pipeline.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDLQ", arg0, arg1, arg2)
	ret0, _ := ret[0].(*pipeline.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDLQ indicates an expected call of UpdateDLQ.
func (mr *PipelineServiceMockRecorder) UpdateDLQ(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDLQ", reflect.TypeOf((*PipelineService)(nil).UpdateDLQ), arg0, arg1, arg2)
}

// ConnectorService is a mock of ConnectorService interface.
type ConnectorService struct {
	ctrl     *gomock.Controller
	recorder *ConnectorServiceMockRecorder
}

// ConnectorServiceMockRecorder is the mock recorder for ConnectorService.
type ConnectorServiceMockRecorder struct {
	mock *ConnectorService
}

// NewConnectorService creates a new mock instance.
func NewConnectorService(ctrl *gomock.Controller) *ConnectorService {
	mock := &ConnectorService{ctrl: ctrl}
	mock.recorder = &ConnectorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ConnectorService) EXPECT() *ConnectorServiceMockRecorder {
	return m.recorder
}

// AddProcessor mocks base method.
func (m *ConnectorService) AddProcessor(arg0 context.Context, arg1, arg2 string) (connector.Connector, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProcessor", arg0, arg1, arg2)
	ret0, _ := ret[0].(connector.Connector)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProcessor indicates an expected call of AddProcessor.
func (mr *ConnectorServiceMockRecorder) AddProcessor(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProcessor", reflect.TypeOf((*ConnectorService)(nil).AddProcessor), arg0, arg1, arg2)
}

// Create mocks base method.
func (m *ConnectorService) Create(arg0 context.Context, arg1 string, arg2 connector.Type, arg3 connector.Config, arg4 connector.ProvisionType) (connector.Connector, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(connector.Connector)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *ConnectorServiceMockRecorder) Create(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*ConnectorService)(nil).Create), arg0, arg1, arg2, arg3, arg4)
}

// Delete mocks base method.
func (m *ConnectorService) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *ConnectorServiceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*ConnectorService)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *ConnectorService) Get(arg0 context.Context, arg1 string) (connector.Connector, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(connector.Connector)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *ConnectorServiceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*ConnectorService)(nil).Get), arg0, arg1)
}

// RemoveProcessor mocks base method.
func (m *ConnectorService) RemoveProcessor(arg0 context.Context, arg1, arg2 string) (connector.Connector, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveProcessor", arg0, arg1, arg2)
	ret0, _ := ret[0].(connector.Connector)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveProcessor indicates an expected call of RemoveProcessor.
func (mr *ConnectorServiceMockRecorder) RemoveProcessor(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveProcessor", reflect.TypeOf((*ConnectorService)(nil).RemoveProcessor), arg0, arg1, arg2)
}

// SetDestinationState mocks base method.
func (m *ConnectorService) SetDestinationState(arg0 context.Context, arg1 string, arg2 connector.DestinationState) (connector.Destination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDestinationState", arg0, arg1, arg2)
	ret0, _ := ret[0].(connector.Destination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetDestinationState indicates an expected call of SetDestinationState.
func (mr *ConnectorServiceMockRecorder) SetDestinationState(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDestinationState", reflect.TypeOf((*ConnectorService)(nil).SetDestinationState), arg0, arg1, arg2)
}

// SetSourceState mocks base method.
func (m *ConnectorService) SetSourceState(arg0 context.Context, arg1 string, arg2 connector.SourceState) (connector.Source, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSourceState", arg0, arg1, arg2)
	ret0, _ := ret[0].(connector.Source)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetSourceState indicates an expected call of SetSourceState.
func (mr *ConnectorServiceMockRecorder) SetSourceState(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSourceState", reflect.TypeOf((*ConnectorService)(nil).SetSourceState), arg0, arg1, arg2)
}

// ProcessorService is a mock of ProcessorService interface.
type ProcessorService struct {
	ctrl     *gomock.Controller
	recorder *ProcessorServiceMockRecorder
}

// ProcessorServiceMockRecorder is the mock recorder for ProcessorService.
type ProcessorServiceMockRecorder struct {
	mock *ProcessorService
}

// NewProcessorService creates a new mock instance.
func NewProcessorService(ctrl *gomock.Controller) *ProcessorService {
	mock := &ProcessorService{ctrl: ctrl}
	mock.recorder = &ProcessorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ProcessorService) EXPECT() *ProcessorServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *ProcessorService) Create(arg0 context.Context, arg1, arg2 string, arg3 processor.Parent, arg4 processor.Config, arg5 processor.ProvisionType) (*processor.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*processor.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *ProcessorServiceMockRecorder) Create(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*ProcessorService)(nil).Create), arg0, arg1, arg2, arg3, arg4, arg5)
}

// Delete mocks base method.
func (m *ProcessorService) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *ProcessorServiceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*ProcessorService)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *ProcessorService) Get(arg0 context.Context, arg1 string) (*processor.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*processor.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *ProcessorServiceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*ProcessorService)(nil).Get), arg0, arg1)
}
