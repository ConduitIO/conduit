// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/conduitio/conduit/pkg/processor (interfaces: PluginService)
//
// Generated by this command:
//
//	mockgen -destination=mock/plugin_service.go -package=mock -mock_names=PluginService=PluginService . PluginService
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	sdk "github.com/conduitio/conduit-processor-sdk"
	gomock "go.uber.org/mock/gomock"
)

// PluginService is a mock of PluginService interface.
type PluginService struct {
	ctrl     *gomock.Controller
	recorder *PluginServiceMockRecorder
}

// PluginServiceMockRecorder is the mock recorder for PluginService.
type PluginServiceMockRecorder struct {
	mock *PluginService
}

// NewPluginService creates a new mock instance.
func NewPluginService(ctrl *gomock.Controller) *PluginService {
	mock := &PluginService{ctrl: ctrl}
	mock.recorder = &PluginServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *PluginService) EXPECT() *PluginServiceMockRecorder {
	return m.recorder
}

// NewProcessor mocks base method.
func (m *PluginService) NewProcessor(arg0 context.Context, arg1, arg2 string) (sdk.Processor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewProcessor", arg0, arg1, arg2)
	ret0, _ := ret[0].(sdk.Processor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewProcessor indicates an expected call of NewProcessor.
func (mr *PluginServiceMockRecorder) NewProcessor(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewProcessor", reflect.TypeOf((*PluginService)(nil).NewProcessor), arg0, arg1, arg2)
}
