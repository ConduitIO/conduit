{
  "specification": {
    "name": "field.set",
    "summary": "Set the value of a certain field.",
    "description": "Set the value of a certain field to any value. It is not allowed to set the `.Position` field.\nThe new value can be a Go template expression, the processor will evaluate the output and assign the value to the target field.\nIf the provided `field` doesn't exist, the processor will create that field and assign its value.\nThis processor can be used for multiple purposes, like extracting fields, hoisting data, inserting fields, copying fields, masking fields, etc.\nNote that this processor only runs on structured data, if the record contains raw JSON data, then use the processor\n[`json.decode`](/docs/using/processors/builtin/json.decode) to parse it into structured data first.",
    "version": "v0.1.0",
    "author": "Meroxa, Inc.",
    "parameters": {
      "field": {
        "default": "",
        "description": "Field is the target field that will be set. Note that it is not allowed\nto set the `.Position` field.\n\nFor more information about the format, see [Referencing fields](https://conduit.io/docs/using/processors/referencing-fields).",
        "type": "string",
        "validations": [
          {
            "type": "required",
            "value": ""
          },
          {
            "type": "exclusion",
            "value": ".Position"
          }
        ]
      },
      "sdk.schema.decode.key.enabled": {
        "default": "true",
        "description": "Whether to decode the record key using its corresponding schema from the schema registry.",
        "type": "bool",
        "validations": null
      },
      "sdk.schema.decode.payload.enabled": {
        "default": "true",
        "description": "Whether to decode the record payload using its corresponding schema from the schema registry.",
        "type": "bool",
        "validations": null
      },
      "sdk.schema.encode.key.enabled": {
        "default": "true",
        "description": "Whether to encode the record key using its corresponding schema from the schema registry.",
        "type": "bool",
        "validations": null
      },
      "sdk.schema.encode.payload.enabled": {
        "default": "true",
        "description": "Whether to encode the record payload using its corresponding schema from the schema registry.",
        "type": "bool",
        "validations": null
      },
      "value": {
        "default": "",
        "description": "Value is a Go template expression which will be evaluated and stored in `field` (e.g. `{{ .Payload.After }}`).",
        "type": "string",
        "validations": [
          {
            "type": "required",
            "value": ""
          }
        ]
      }
    }
  },
  "examples": [
    {
      "summary": "Add field",
      "description": "This example adds a new field to the record. The field is\nadded to `.Payload.After` and is set to `bar`.",
      "config": {
        "field": ".Payload.After.foo",
        "value": "bar"
      },
      "have": {
        "position": null,
        "operation": "snapshot",
        "metadata": null,
        "key": {
          "my-key": "id"
        },
        "payload": {
          "before": null,
          "after": null
        }
      },
      "want": {
        "position": null,
        "operation": "snapshot",
        "metadata": null,
        "key": {
          "my-key": "id"
        },
        "payload": {
          "before": null,
          "after": {
            "foo": "bar"
          }
        }
      }
    },
    {
      "summary": "Sets the record operation to `update`",
      "description": "This example sets the `.Operation` field to `update` for all records.",
      "config": {
        "field": ".Operation",
        "value": "update"
      },
      "have": {
        "position": null,
        "operation": "create",
        "metadata": null,
        "key": null,
        "payload": {
          "before": null,
          "after": null
        }
      },
      "want": {
        "position": null,
        "operation": "update",
        "metadata": null,
        "key": null,
        "payload": {
          "before": null,
          "after": null
        }
      }
    },
    {
      "summary": "Set field using Go template",
      "description": "This example sets the `.Payload.After.postgres` field to `true` if the `.Metadata.table` field contains `postgres`.",
      "config": {
        "field": ".Payload.After.postgres",
        "value": "{{ eq .Metadata.table \"postgres\" }}"
      },
      "have": {
        "position": null,
        "operation": "snapshot",
        "metadata": {
          "table": "postgres"
        },
        "key": null,
        "payload": {
          "before": null,
          "after": {
            "postgres": "false"
          }
        }
      },
      "want": {
        "position": null,
        "operation": "snapshot",
        "metadata": {
          "table": "postgres"
        },
        "key": null,
        "payload": {
          "before": null,
          "after": {
            "postgres": "true"
          }
        }
      }
    }
  ]
}
