{
  "specification": {
    "name": "webhook.http",
    "summary": "Trigger an HTTP request for every record.",
    "description": "A processor that sends an HTTP request to the specified URL, retries on error and \nsaves the response body and, optionally, the response status.\n\nA status code over 500 is regarded as an error and will cause the processor to retry the request.\nThe processor will retry the request according to the backoff configuration.",
    "version": "v0.1.0",
    "author": "Meroxa, Inc.",
    "parameters": {
      "backoffRetry.count": {
        "default": "0",
        "description": "Maximum number of retries for an individual record when backing off following an error.",
        "type": "float",
        "validations": [
          {
            "type": "greater-than",
            "value": "-1"
          }
        ]
      },
      "backoffRetry.factor": {
        "default": "2",
        "description": "The multiplying factor for each increment step.",
        "type": "float",
        "validations": [
          {
            "type": "greater-than",
            "value": "0"
          }
        ]
      },
      "backoffRetry.max": {
        "default": "5s",
        "description": "The maximum waiting time before retrying.",
        "type": "duration",
        "validations": []
      },
      "backoffRetry.min": {
        "default": "100ms",
        "description": "The minimum waiting time before retrying.",
        "type": "duration",
        "validations": []
      },
      "headers.*": {
        "default": "",
        "description": "Headers to add to the request, use `headers.*` to specify the header and its value (e.g. `headers.Authorization: \"Bearer key\"`).",
        "type": "string",
        "validations": []
      },
      "request.body": {
        "default": "",
        "description": "Specifies which field from the input record should be used as the body in\nthe HTTP request.\n\nFor more information about the format, see [Referencing fields](https://conduit.io/docs/processors/referencing-fields).",
        "type": "string",
        "validations": []
      },
      "request.contentType": {
        "default": "",
        "description": "Deprecated: use `headers.Content-Type` instead.",
        "type": "string",
        "validations": []
      },
      "request.method": {
        "default": "GET",
        "description": "Method is the HTTP request method to be used.",
        "type": "string",
        "validations": []
      },
      "request.url": {
        "default": "",
        "description": "URL is a Go template expression for the URL used in the HTTP request, using Go [templates](https://pkg.go.dev/text/template).\nThe value provided to the template is [opencdc.Record](https://github.com/ConduitIO/conduit-commons/blob/59ecfbe5d5be2ac4cd9a674d274862d164123f36/opencdc/record.go#L30),\nso the template has access to all its fields (e.g. `.Position`, `.Key`, `.Metadata`, and so on). We also inject all template functions provided by [sprig](https://masterminds.github.io/sprig/)\nto make it easier to write templates.",
        "type": "string",
        "validations": [
          {
            "type": "required",
            "value": ""
          }
        ]
      },
      "response.body": {
        "default": ".Payload.After",
        "description": "Specifies in which field should the response body be saved.\n\nFor more information about the format, see [Referencing fields](https://conduit.io/docs/processors/referencing-fields).",
        "type": "string",
        "validations": []
      },
      "response.status": {
        "default": "",
        "description": "Specifies in which field should the response status be saved. If no value\nis set, then the response status will NOT be saved.\n\nFor more information about the format, see [Referencing fields](https://conduit.io/docs/processors/referencing-fields).",
        "type": "string",
        "validations": []
      }
    }
  },
  "examples": [
    {
      "summary": "Send a request to an HTTP server",
      "description": "\nThis example shows how to use the HTTP processor to send a record's `.Payload.After` field to a dummy HTTP server\nthat replies back with a greeting.\n\nThe record's `.Payload.After` is overwritten with the response. Additionally, the example shows how to set a request\nheader and how to store the value of the HTTP response's code in the metadata field `http_status`.",
      "config": {
        "backoffRetry.count": "0",
        "backoffRetry.factor": "2",
        "backoffRetry.max": "5s",
        "backoffRetry.min": "100ms",
        "headers.content-type": "application/json",
        "request.body": ".Payload.After",
        "request.method": "GET",
        "request.url": "http://127.0.0.1:54321",
        "response.body": ".Payload.After",
        "response.status": ".Metadata[\"http_status\"]"
      },
      "have": {
        "position": "cG9zLTE=",
        "operation": "update",
        "metadata": null,
        "key": null,
        "payload": {
          "before": null,
          "after": "world"
        }
      },
      "want": {
        "position": "cG9zLTE=",
        "operation": "update",
        "metadata": {
          "http_status": "200"
        },
        "key": null,
        "payload": {
          "before": null,
          "after": "hello, world"
        }
      }
    },
    {
      "summary": "Send a request to an HTTP server with a dynamic URL",
      "description": "\nThis example shows how to use the HTTP processor to use a record's `.Payload.After.name` field in the URL path,\nsend it to a dummy HTTP server, and get a greeting with the name back.\n\nThe response will be written under the record's `.Payload.After.response`.",
      "config": {
        "backoffRetry.count": "0",
        "backoffRetry.factor": "2",
        "backoffRetry.max": "5s",
        "backoffRetry.min": "100ms",
        "request.method": "GET",
        "request.url": "http://127.0.0.1:54321/{{.Payload.After.name}}",
        "response.body": ".Payload.After.response"
      },
      "have": {
        "position": "cG9zLTE=",
        "operation": "create",
        "metadata": null,
        "key": null,
        "payload": {
          "before": null,
          "after": {
            "name": "foo"
          }
        }
      },
      "want": {
        "position": "cG9zLTE=",
        "operation": "create",
        "metadata": null,
        "key": null,
        "payload": {
          "before": null,
          "after": {
            "name": "foo",
            "response": "aGVsbG8sIGZvbyE="
          }
        }
      }
    }
  ]
}
