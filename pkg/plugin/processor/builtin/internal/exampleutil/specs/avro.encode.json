{
  "specification": {
    "name": "avro.encode",
    "summary": "Encodes a record's field into the Avro format.",
    "description": "The processor takes a record's field and encodes it using a schema into the [Avro format](https://avro.apache.org/).\nIt provides two strategies for determining the schema:\n\n* **preRegistered** (recommended)\n  This strategy downloads an existing schema from the schema registry and uses it to encode the record.\n  This requires the schema to already be registered in the schema registry. The schema is downloaded\n  only once and cached locally.\n* **autoRegister** (for development purposes)\n  This strategy infers the schema by inspecting the structured data and registers it in the schema\n  registry. If the record schema is known in advance it's recommended to use the preRegistered strategy\n  and manually register the schema, as this strategy comes with limitations.\n\n  The strategy uses reflection to traverse the structured data of each record and determine the type\n  of each field. If a specific field is set to nil the processor won't have enough information to determine\n  the type and will default to a nullable string. Because of this it is not guaranteed that two records\n  with the same structure produce the same schema or even a backwards compatible schema. The processor\n  registers each inferred schema in the schema registry with the same subject, therefore the schema compatibility\n  checks need to be disabled for this schema to prevent failures. If the schema subject does not exist before running\n  this processor, it will automatically set the correct compatibility settings in the schema registry.\n\nThis processor is the counterpart to [`avro.decode`](/docs/processors/builtin/avro.decode).",
    "version": "v0.1.0",
    "author": "Meroxa, Inc.",
    "parameters": {
      "auth.basic.password": {
        "default": "",
        "description": "The password to use with basic authentication. This option is required if\nauth.basic.username contains a value. If both auth.basic.username and auth.basic.password\nare empty basic authentication is disabled.",
        "type": "string",
        "validations": []
      },
      "auth.basic.username": {
        "default": "",
        "description": "The username to use with basic authentication. This option is required if\nauth.basic.password contains a value. If both auth.basic.username and auth.basic.password\nare empty basic authentication is disabled.",
        "type": "string",
        "validations": []
      },
      "field": {
        "default": ".Payload.After",
        "description": "The field that will be encoded.\n\nFor more information about the format, see [Referencing fields](https://conduit.io/docs/processors/referencing-fields).",
        "type": "string",
        "validations": []
      },
      "schema.autoRegister.subject": {
        "default": "",
        "description": "The subject name under which the inferred schema will be registered in the schema registry.",
        "type": "string",
        "validations": []
      },
      "schema.preRegistered.subject": {
        "default": "",
        "description": "The subject of the schema in the schema registry used to encode the record.",
        "type": "string",
        "validations": []
      },
      "schema.preRegistered.version": {
        "default": "",
        "description": "The version of the schema in the schema registry used to encode the record.",
        "type": "int",
        "validations": [
          {
            "type": "greater-than",
            "value": "0"
          }
        ]
      },
      "schema.strategy": {
        "default": "",
        "description": "Strategy to use to determine the schema for the record.\nAvailable strategies are:\n* `preRegistered` (recommended) - Download an existing schema from the schema registry.\n   This strategy is further configured with options starting with `schema.preRegistered.*`.\n* `autoRegister` (for development purposes) - Infer the schema from the record and register it\n   in the schema registry. This strategy is further configured with options starting with\n  `schema.autoRegister.*`.\n\nFor more information about the behavior of each strategy read the main processor description.",
        "type": "string",
        "validations": [
          {
            "type": "required",
            "value": ""
          },
          {
            "type": "inclusion",
            "value": "preRegistered,autoRegister"
          }
        ]
      },
      "tls.ca.cert": {
        "default": "",
        "description": "The path to a file containing PEM encoded CA certificates. If this option is empty,\nConduit falls back to using the host's root CA set.",
        "type": "string",
        "validations": []
      },
      "tls.client.cert": {
        "default": "",
        "description": "The path to a file containing a PEM encoded certificate. This option is required\nif tls.client.key contains a value. If both tls.client.cert and tls.client.key are empty\nTLS is disabled.",
        "type": "string",
        "validations": []
      },
      "tls.client.key": {
        "default": "",
        "description": "The path to a file containing a PEM encoded private key. This option is required\nif tls.client.cert contains a value. If both tls.client.cert and tls.client.key are empty\nTLS is disabled.",
        "type": "string",
        "validations": []
      },
      "url": {
        "default": "",
        "description": "URL of the schema registry (e.g. http://localhost:8085)",
        "type": "string",
        "validations": [
          {
            "type": "required",
            "value": ""
          }
        ]
      }
    }
  },
  "examples": [
    {
      "summary": "Auto-register schema",
      "description": "This example shows the usage of the `avro.encode` processor\nwith the `autoRegister` schema strategy. The processor encodes the record's\n`.Payload.After` field using the schema that is extracted from the data\nand registered on the fly under the subject `example-autoRegister`.",
      "config": {
        "auth.basic.password": "",
        "auth.basic.username": "",
        "field": ".Payload.After",
        "schema.autoRegister.subject": "example-autoRegister",
        "schema.preRegistered.subject": "",
        "schema.preRegistered.version": "",
        "schema.strategy": "autoRegister",
        "tls.ca.cert": "",
        "tls.client.cert": "",
        "tls.client.key": "",
        "url": "http://127.0.0.1:54322"
      },
      "have": {
        "position": "dGVzdC1wb3NpdGlvbg==",
        "operation": "create",
        "metadata": {
          "key1": "val1"
        },
        "key": null,
        "payload": {
          "before": null,
          "after": {
            "myFloat": 2.3,
            "myInt": 1,
            "myMap": {
              "bar": 2.2,
              "foo": true
            },
            "myString": "bar",
            "myStruct": {
              "bar": false,
              "foo": 1
            }
          }
        }
      },
      "want": {
        "position": "dGVzdC1wb3NpdGlvbg==",
        "operation": "create",
        "metadata": {
          "key1": "val1"
        },
        "key": null,
        "payload": {
          "before": null,
          "after": "\u0000\u0000\u0000\u0000\u0001ffffff\u0002@\u0002\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0001@\u0001\u0006bar\u0000\u0002"
        }
      }
    },
    {
      "summary": "Pre-register schema",
      "description": "This example shows the usage of the `avro.encode` processor\nwith the `preRegistered` schema strategy. When using this strategy, the\nschema has to be manually pre-registered. In this example we use the following schema:\n\n```json\n{\n  \"type\":\"record\",\n  \"name\":\"record\",\n  \"fields\":[\n    {\"name\":\"myString\",\"type\":\"string\"},\n    {\"name\":\"myInt\",\"type\":\"int\"}\n  ]\n}\n```\n\nThe processor encodes the record's`.Key` field using the above schema.",
      "config": {
        "auth.basic.password": "",
        "auth.basic.username": "",
        "field": ".Key",
        "schema.autoRegister.subject": "",
        "schema.preRegistered.subject": "example-preRegistered",
        "schema.preRegistered.version": "1",
        "schema.strategy": "preRegistered",
        "tls.ca.cert": "",
        "tls.client.cert": "",
        "tls.client.key": "",
        "url": "http://127.0.0.1:54322"
      },
      "have": {
        "position": "dGVzdC1wb3NpdGlvbg==",
        "operation": "create",
        "metadata": {
          "key1": "val1"
        },
        "key": {
          "myInt": 1,
          "myString": "bar"
        },
        "payload": {
          "before": null,
          "after": null
        }
      },
      "want": {
        "position": "dGVzdC1wb3NpdGlvbg==",
        "operation": "create",
        "metadata": {
          "key1": "val1"
        },
        "key": "\u0000\u0000\u0000\u0000\u0001\u0006bar\u0002",
        "payload": {
          "before": null,
          "after": null
        }
      }
    }
  ]
}
