// Code generated by paramgen. DO NOT EDIT.
// Source: github.com/ConduitIO/conduit-commons/tree/main/paramgen

package avro

import (
	"github.com/conduitio/conduit-commons/config"
)

func (encodeConfig) Parameters() map[string]config.Parameter {
	return map[string]config.Parameter{
		"auth.basic.password": {
			Default:     "",
			Description: "basic.password is the password to use with basic authentication. This option is required if auth.basic.username contains a value. If both auth.basic.username and auth.basic.password are empty basic authentication is disabled.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		"auth.basic.username": {
			Default:     "",
			Description: "basic.username is the username to use with basic authentication. This option is required if auth.basic.password contains a value. If both auth.basic.username and auth.basic.password are empty basic authentication is disabled.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		"field": {
			Default:     ".Payload.After",
			Description: "field is the field that will be encoded.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		"schema.autoRegistered.subject": {
			Default:     "",
			Description: "autoRegistered.subject specifies the subject name under which the inferred schema will be registered in the schema registry.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		"schema.preRegistered.subject": {
			Default:     "",
			Description: "subject specifies the subject of the schema in the schema registry used to encode the record.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		"schema.preRegistered.version": {
			Default:     "",
			Description: "version specifies the version of the schema in the schema registry used to encode the record. todo validations ok?",
			Type:        config.ParameterTypeInt,
			Validations: []config.Validation{
				config.ValidationGreaterThan{V: 0},
			},
		},
		"schema.strategy": {
			Default:     "",
			Description: "Schemastrategy specifies which strategy to use to determine the schema for the record. Available strategies are: * `preRegistered` (recommended) - Download an existing schema from the schema registry.    This strategy is further configured with options starting with `schema.preRegistered.*`. * `autoRegister` (for development purposes) - Infer the schema from the record and register it    in the schema registry. This strategy is further configured with options starting with   `schema.autoRegister.*`.  For more information about the behavior of each strategy read the main processor description.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationRequired{},
				config.ValidationInclusion{List: []string{"preRegistered", "autoRegister"}},
			},
		},
		"tls.ca.cert": {
			Default:     "",
			Description: "ca.cert is the path to a file containing PEM encoded CA certificates. If this option is empty, Conduit falls back to using the host's root CA set.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		"tls.client.cert": {
			Default:     "",
			Description: "cert is the path to a file containing a PEM encoded certificate. This option is required if tls.client.key contains a value. If both tls.client.cert and tls.client.key are empty TLS is disabled.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		"tls.client.key": {
			Default:     "",
			Description: "key is the path to a file containing a PEM encoded private key. This option is required if tls.client.cert contains a value. If both tls.client.cert and tls.client.key are empty TLS is disabled.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		"url": {
			Default:     "",
			Description: "url of the schema registry (e.g. http://localhost:8085)",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationRequired{},
			},
		},
	}
}
