// Code generated by paramgen. DO NOT EDIT.
// Source: github.com/ConduitIO/conduit-commons/tree/main/paramgen

package openaiembedding

import (
	"regexp"

	"github.com/conduitio/conduit-commons/config"
)

const (
	procConfigApiKey                  = "apiKey"
	procConfigEmbeddingEncodingFormat = "embeddingEncodingFormat"
	procConfigEndpoint                = "endpoint"
	procConfigInputField              = "inputField"
	procConfigModel                   = "model"
	procConfigOutputField             = "outputField"
)

func (procConfig) Parameters() map[string]config.Parameter {
	return map[string]config.Parameter{
		procConfigApiKey: {
			Default:     "",
			Description: "",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationRequired{},
			},
		},
		procConfigEmbeddingEncodingFormat: {
			Default:     "float",
			Description: "",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationInclusion{List: []string{"float", "base64"}},
			},
		},
		procConfigEndpoint: {
			Default:     "https://api.openai.com/v1",
			Description: "",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		procConfigInputField: {
			Default:     ".Payload.After",
			Description: "",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationRegex{Regex: regexp.MustCompile("^\\.(Payload|Key).*")},
			},
		},
		procConfigModel: {
			Default:     "",
			Description: "",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationRequired{},
				config.ValidationInclusion{List: []string{"text-embedding-3-small", "text-embedding-3-large"}},
			},
		},
		procConfigOutputField: {
			Default:     ".Payload.After.vectors",
			Description: "",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationRegex{Regex: regexp.MustCompile("^\\.(Payload|Key).*")},
			},
		},
	}
}
