// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -typed -source=service.go -destination=mock/registry.go -package=mock -mock_names=registry=Registry,standaloneRegistry=StandaloneRegistry . registry,standaloneRegistry
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	sdk "github.com/conduitio/conduit-processor-sdk"
	plugin "github.com/conduitio/conduit/pkg/plugin"
	gomock "go.uber.org/mock/gomock"
)

// Registry is a mock of registry interface.
type Registry struct {
	ctrl     *gomock.Controller
	recorder *RegistryMockRecorder
	isgomock struct{}
}

// RegistryMockRecorder is the mock recorder for Registry.
type RegistryMockRecorder struct {
	mock *Registry
}

// NewRegistry creates a new mock instance.
func NewRegistry(ctrl *gomock.Controller) *Registry {
	mock := &Registry{ctrl: ctrl}
	mock.recorder = &RegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Registry) EXPECT() *RegistryMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *Registry) List() map[plugin.FullName]sdk.Specification {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].(map[plugin.FullName]sdk.Specification)
	return ret0
}

// List indicates an expected call of List.
func (mr *RegistryMockRecorder) List() *RegistryListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*Registry)(nil).List))
	return &RegistryListCall{Call: call}
}

// RegistryListCall wrap *gomock.Call
type RegistryListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RegistryListCall) Return(arg0 map[plugin.FullName]sdk.Specification) *RegistryListCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RegistryListCall) Do(f func() map[plugin.FullName]sdk.Specification) *RegistryListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RegistryListCall) DoAndReturn(f func() map[plugin.FullName]sdk.Specification) *RegistryListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NewProcessor mocks base method.
func (m *Registry) NewProcessor(ctx context.Context, fullName plugin.FullName, id string) (sdk.Processor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewProcessor", ctx, fullName, id)
	ret0, _ := ret[0].(sdk.Processor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewProcessor indicates an expected call of NewProcessor.
func (mr *RegistryMockRecorder) NewProcessor(ctx, fullName, id any) *RegistryNewProcessorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewProcessor", reflect.TypeOf((*Registry)(nil).NewProcessor), ctx, fullName, id)
	return &RegistryNewProcessorCall{Call: call}
}

// RegistryNewProcessorCall wrap *gomock.Call
type RegistryNewProcessorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *RegistryNewProcessorCall) Return(arg0 sdk.Processor, arg1 error) *RegistryNewProcessorCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *RegistryNewProcessorCall) Do(f func(context.Context, plugin.FullName, string) (sdk.Processor, error)) *RegistryNewProcessorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *RegistryNewProcessorCall) DoAndReturn(f func(context.Context, plugin.FullName, string) (sdk.Processor, error)) *RegistryNewProcessorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StandaloneRegistry is a mock of standaloneRegistry interface.
type StandaloneRegistry struct {
	ctrl     *gomock.Controller
	recorder *StandaloneRegistryMockRecorder
	isgomock struct{}
}

// StandaloneRegistryMockRecorder is the mock recorder for StandaloneRegistry.
type StandaloneRegistryMockRecorder struct {
	mock *StandaloneRegistry
}

// NewStandaloneRegistry creates a new mock instance.
func NewStandaloneRegistry(ctrl *gomock.Controller) *StandaloneRegistry {
	mock := &StandaloneRegistry{ctrl: ctrl}
	mock.recorder = &StandaloneRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *StandaloneRegistry) EXPECT() *StandaloneRegistryMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *StandaloneRegistry) List() map[plugin.FullName]sdk.Specification {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].(map[plugin.FullName]sdk.Specification)
	return ret0
}

// List indicates an expected call of List.
func (mr *StandaloneRegistryMockRecorder) List() *StandaloneRegistryListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*StandaloneRegistry)(nil).List))
	return &StandaloneRegistryListCall{Call: call}
}

// StandaloneRegistryListCall wrap *gomock.Call
type StandaloneRegistryListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *StandaloneRegistryListCall) Return(arg0 map[plugin.FullName]sdk.Specification) *StandaloneRegistryListCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *StandaloneRegistryListCall) Do(f func() map[plugin.FullName]sdk.Specification) *StandaloneRegistryListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *StandaloneRegistryListCall) DoAndReturn(f func() map[plugin.FullName]sdk.Specification) *StandaloneRegistryListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NewProcessor mocks base method.
func (m *StandaloneRegistry) NewProcessor(ctx context.Context, fullName plugin.FullName, id string) (sdk.Processor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewProcessor", ctx, fullName, id)
	ret0, _ := ret[0].(sdk.Processor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewProcessor indicates an expected call of NewProcessor.
func (mr *StandaloneRegistryMockRecorder) NewProcessor(ctx, fullName, id any) *StandaloneRegistryNewProcessorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewProcessor", reflect.TypeOf((*StandaloneRegistry)(nil).NewProcessor), ctx, fullName, id)
	return &StandaloneRegistryNewProcessorCall{Call: call}
}

// StandaloneRegistryNewProcessorCall wrap *gomock.Call
type StandaloneRegistryNewProcessorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *StandaloneRegistryNewProcessorCall) Return(arg0 sdk.Processor, arg1 error) *StandaloneRegistryNewProcessorCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *StandaloneRegistryNewProcessorCall) Do(f func(context.Context, plugin.FullName, string) (sdk.Processor, error)) *StandaloneRegistryNewProcessorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *StandaloneRegistryNewProcessorCall) DoAndReturn(f func(context.Context, plugin.FullName, string) (sdk.Processor, error)) *StandaloneRegistryNewProcessorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Register mocks base method.
func (m *StandaloneRegistry) Register(ctx context.Context, path string) (plugin.FullName, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, path)
	ret0, _ := ret[0].(plugin.FullName)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *StandaloneRegistryMockRecorder) Register(ctx, path any) *StandaloneRegistryRegisterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*StandaloneRegistry)(nil).Register), ctx, path)
	return &StandaloneRegistryRegisterCall{Call: call}
}

// StandaloneRegistryRegisterCall wrap *gomock.Call
type StandaloneRegistryRegisterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *StandaloneRegistryRegisterCall) Return(arg0 plugin.FullName, arg1 error) *StandaloneRegistryRegisterCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *StandaloneRegistryRegisterCall) Do(f func(context.Context, string) (plugin.FullName, error)) *StandaloneRegistryRegisterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *StandaloneRegistryRegisterCall) DoAndReturn(f func(context.Context, string) (plugin.FullName, error)) *StandaloneRegistryRegisterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
