// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=mock/registry.go -package=mock -mock_names=registry=Registry . registry
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	sdk "github.com/conduitio/conduit-processor-sdk"
	plugin "github.com/conduitio/conduit/pkg/plugin"
	gomock "go.uber.org/mock/gomock"
)

// Registry is a mock of registry interface.
type Registry struct {
	ctrl     *gomock.Controller
	recorder *RegistryMockRecorder
}

// RegistryMockRecorder is the mock recorder for Registry.
type RegistryMockRecorder struct {
	mock *Registry
}

// NewRegistry creates a new mock instance.
func NewRegistry(ctrl *gomock.Controller) *Registry {
	mock := &Registry{ctrl: ctrl}
	mock.recorder = &RegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Registry) EXPECT() *RegistryMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *Registry) List() map[plugin.FullName]sdk.Specification {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].(map[plugin.FullName]sdk.Specification)
	return ret0
}

// List indicates an expected call of List.
func (mr *RegistryMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*Registry)(nil).List))
}

// NewProcessor mocks base method.
func (m *Registry) NewProcessor(ctx context.Context, fullName plugin.FullName, id string) (sdk.Processor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewProcessor", ctx, fullName, id)
	ret0, _ := ret[0].(sdk.Processor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewProcessor indicates an expected call of NewProcessor.
func (mr *RegistryMockRecorder) NewProcessor(ctx, fullName, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewProcessor", reflect.TypeOf((*Registry)(nil).NewProcessor), ctx, fullName, id)
}
