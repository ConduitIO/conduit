// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/conduitio/conduit/pkg/plugin/processor (interfaces: ProcessorPlugin)
//
// Generated by this command:
//
//	mockgen -destination=mock/plugin.go -package=mock -mock_names=ProcessorPlugin=ProcessorPlugin . ProcessorPlugin
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	opencdc "github.com/conduitio/conduit-commons/opencdc"
	processor "github.com/conduitio/conduit/pkg/plugin/processor"
	gomock "go.uber.org/mock/gomock"
)

// ProcessorPlugin is a mock of ProcessorPlugin interface.
type ProcessorPlugin struct {
	ctrl     *gomock.Controller
	recorder *ProcessorPluginMockRecorder
}

// ProcessorPluginMockRecorder is the mock recorder for ProcessorPlugin.
type ProcessorPluginMockRecorder struct {
	mock *ProcessorPlugin
}

// NewProcessorPlugin creates a new mock instance.
func NewProcessorPlugin(ctrl *gomock.Controller) *ProcessorPlugin {
	mock := &ProcessorPlugin{ctrl: ctrl}
	mock.recorder = &ProcessorPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ProcessorPlugin) EXPECT() *ProcessorPluginMockRecorder {
	return m.recorder
}

// Configure mocks base method.
func (m *ProcessorPlugin) Configure(arg0 context.Context, arg1 map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Configure", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Configure indicates an expected call of Configure.
func (mr *ProcessorPluginMockRecorder) Configure(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*ProcessorPlugin)(nil).Configure), arg0, arg1)
}

// Open mocks base method.
func (m *ProcessorPlugin) Open(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open.
func (mr *ProcessorPluginMockRecorder) Open(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*ProcessorPlugin)(nil).Open), arg0)
}

// Process mocks base method.
func (m *ProcessorPlugin) Process(arg0 context.Context, arg1 []opencdc.Record) []processor.ProcessedRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", arg0, arg1)
	ret0, _ := ret[0].([]processor.ProcessedRecord)
	return ret0
}

// Process indicates an expected call of Process.
func (mr *ProcessorPluginMockRecorder) Process(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*ProcessorPlugin)(nil).Process), arg0, arg1)
}

// Specification mocks base method.
func (m *ProcessorPlugin) Specification() processor.Specification {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Specification")
	ret0, _ := ret[0].(processor.Specification)
	return ret0
}

// Specification indicates an expected call of Specification.
func (mr *ProcessorPluginMockRecorder) Specification() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Specification", reflect.TypeOf((*ProcessorPlugin)(nil).Specification))
}

// Teardown mocks base method.
func (m *ProcessorPlugin) Teardown(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Teardown", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Teardown indicates an expected call of Teardown.
func (mr *ProcessorPluginMockRecorder) Teardown(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Teardown", reflect.TypeOf((*ProcessorPlugin)(nil).Teardown), arg0)
}
