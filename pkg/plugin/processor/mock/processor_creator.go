// Code generated by MockGen. DO NOT EDIT.
// Source: registry.go
//
// Generated by this command:
//
//	mockgen -source=registry.go -destination=mock/processor_creator.go -package=mock -mock_names=processorCreator=ProcessorCreator . processorCreator
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	sdk "github.com/conduitio/conduit-processor-sdk"
	plugin "github.com/conduitio/conduit/pkg/plugin"
	gomock "go.uber.org/mock/gomock"
)

// ProcessorCreator is a mock of processorCreator interface.
type ProcessorCreator struct {
	ctrl     *gomock.Controller
	recorder *ProcessorCreatorMockRecorder
}

// ProcessorCreatorMockRecorder is the mock recorder for ProcessorCreator.
type ProcessorCreatorMockRecorder struct {
	mock *ProcessorCreator
}

// NewProcessorCreator creates a new mock instance.
func NewProcessorCreator(ctrl *gomock.Controller) *ProcessorCreator {
	mock := &ProcessorCreator{ctrl: ctrl}
	mock.recorder = &ProcessorCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ProcessorCreator) EXPECT() *ProcessorCreatorMockRecorder {
	return m.recorder
}

// NewProcessor mocks base method.
func (m *ProcessorCreator) NewProcessor(ctx context.Context, fullName plugin.FullName, id string) (sdk.Processor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewProcessor", ctx, fullName, id)
	ret0, _ := ret[0].(sdk.Processor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewProcessor indicates an expected call of NewProcessor.
func (mr *ProcessorCreatorMockRecorder) NewProcessor(ctx, fullName, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewProcessor", reflect.TypeOf((*ProcessorCreator)(nil).NewProcessor), ctx, fullName, id)
}
