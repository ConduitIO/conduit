// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/conduitio/conduit-processor-sdk (interfaces: Processor)
//
// Generated by this command:
//
//	mockgen -typed -destination=mock/processor.go -package=mock -mock_names=Processor=Processor github.com/conduitio/conduit-processor-sdk Processor
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	config "github.com/conduitio/conduit-commons/config"
	opencdc "github.com/conduitio/conduit-commons/opencdc"
	sdk "github.com/conduitio/conduit-processor-sdk"
	gomock "go.uber.org/mock/gomock"
)

// Processor is a mock of Processor interface.
type Processor struct {
	sdk.UnimplementedProcessor
	ctrl     *gomock.Controller
	recorder *ProcessorMockRecorder
	isgomock struct{}
}

// ProcessorMockRecorder is the mock recorder for Processor.
type ProcessorMockRecorder struct {
	mock *Processor
}

// NewProcessor creates a new mock instance.
func NewProcessor(ctrl *gomock.Controller) *Processor {
	mock := &Processor{ctrl: ctrl}
	mock.recorder = &ProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Processor) EXPECT() *ProcessorMockRecorder {
	return m.recorder
}

// Configure mocks base method.
func (m *Processor) Configure(arg0 context.Context, arg1 config.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Configure", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Configure indicates an expected call of Configure.
func (mr *ProcessorMockRecorder) Configure(arg0, arg1 any) *ProcessorConfigureCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*Processor)(nil).Configure), arg0, arg1)
	return &ProcessorConfigureCall{Call: call}
}

// ProcessorConfigureCall wrap *gomock.Call
type ProcessorConfigureCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ProcessorConfigureCall) Return(arg0 error) *ProcessorConfigureCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ProcessorConfigureCall) Do(f func(context.Context, config.Config) error) *ProcessorConfigureCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ProcessorConfigureCall) DoAndReturn(f func(context.Context, config.Config) error) *ProcessorConfigureCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MiddlewareOptions mocks base method.
func (m *Processor) MiddlewareOptions() []sdk.ProcessorMiddlewareOption {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MiddlewareOptions")
	ret0, _ := ret[0].([]sdk.ProcessorMiddlewareOption)
	return ret0
}

// MiddlewareOptions indicates an expected call of MiddlewareOptions.
func (mr *ProcessorMockRecorder) MiddlewareOptions() *ProcessorMiddlewareOptionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MiddlewareOptions", reflect.TypeOf((*Processor)(nil).MiddlewareOptions))
	return &ProcessorMiddlewareOptionsCall{Call: call}
}

// ProcessorMiddlewareOptionsCall wrap *gomock.Call
type ProcessorMiddlewareOptionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ProcessorMiddlewareOptionsCall) Return(arg0 []sdk.ProcessorMiddlewareOption) *ProcessorMiddlewareOptionsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ProcessorMiddlewareOptionsCall) Do(f func() []sdk.ProcessorMiddlewareOption) *ProcessorMiddlewareOptionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ProcessorMiddlewareOptionsCall) DoAndReturn(f func() []sdk.ProcessorMiddlewareOption) *ProcessorMiddlewareOptionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Open mocks base method.
func (m *Processor) Open(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open.
func (mr *ProcessorMockRecorder) Open(arg0 any) *ProcessorOpenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*Processor)(nil).Open), arg0)
	return &ProcessorOpenCall{Call: call}
}

// ProcessorOpenCall wrap *gomock.Call
type ProcessorOpenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ProcessorOpenCall) Return(arg0 error) *ProcessorOpenCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ProcessorOpenCall) Do(f func(context.Context) error) *ProcessorOpenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ProcessorOpenCall) DoAndReturn(f func(context.Context) error) *ProcessorOpenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Process mocks base method.
func (m *Processor) Process(arg0 context.Context, arg1 []opencdc.Record) []sdk.ProcessedRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", arg0, arg1)
	ret0, _ := ret[0].([]sdk.ProcessedRecord)
	return ret0
}

// Process indicates an expected call of Process.
func (mr *ProcessorMockRecorder) Process(arg0, arg1 any) *ProcessorProcessCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*Processor)(nil).Process), arg0, arg1)
	return &ProcessorProcessCall{Call: call}
}

// ProcessorProcessCall wrap *gomock.Call
type ProcessorProcessCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ProcessorProcessCall) Return(arg0 []sdk.ProcessedRecord) *ProcessorProcessCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ProcessorProcessCall) Do(f func(context.Context, []opencdc.Record) []sdk.ProcessedRecord) *ProcessorProcessCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ProcessorProcessCall) DoAndReturn(f func(context.Context, []opencdc.Record) []sdk.ProcessedRecord) *ProcessorProcessCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Specification mocks base method.
func (m *Processor) Specification() (sdk.Specification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Specification")
	ret0, _ := ret[0].(sdk.Specification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Specification indicates an expected call of Specification.
func (mr *ProcessorMockRecorder) Specification() *ProcessorSpecificationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Specification", reflect.TypeOf((*Processor)(nil).Specification))
	return &ProcessorSpecificationCall{Call: call}
}

// ProcessorSpecificationCall wrap *gomock.Call
type ProcessorSpecificationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ProcessorSpecificationCall) Return(arg0 sdk.Specification, arg1 error) *ProcessorSpecificationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ProcessorSpecificationCall) Do(f func() (sdk.Specification, error)) *ProcessorSpecificationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ProcessorSpecificationCall) DoAndReturn(f func() (sdk.Specification, error)) *ProcessorSpecificationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Teardown mocks base method.
func (m *Processor) Teardown(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Teardown", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Teardown indicates an expected call of Teardown.
func (mr *ProcessorMockRecorder) Teardown(arg0 any) *ProcessorTeardownCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Teardown", reflect.TypeOf((*Processor)(nil).Teardown), arg0)
	return &ProcessorTeardownCall{Call: call}
}

// ProcessorTeardownCall wrap *gomock.Call
type ProcessorTeardownCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ProcessorTeardownCall) Return(arg0 error) *ProcessorTeardownCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ProcessorTeardownCall) Do(f func(context.Context) error) *ProcessorTeardownCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ProcessorTeardownCall) DoAndReturn(f func(context.Context) error) *ProcessorTeardownCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// mustEmbedUnimplementedProcessor mocks base method.
func (m *Processor) mustEmbedUnimplementedProcessor() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedProcessor")
}

// mustEmbedUnimplementedProcessor indicates an expected call of mustEmbedUnimplementedProcessor.
func (mr *ProcessorMockRecorder) mustEmbedUnimplementedProcessor() *ProcessormustEmbedUnimplementedProcessorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedProcessor", reflect.TypeOf((*Processor)(nil).mustEmbedUnimplementedProcessor))
	return &ProcessormustEmbedUnimplementedProcessorCall{Call: call}
}

// ProcessormustEmbedUnimplementedProcessorCall wrap *gomock.Call
type ProcessormustEmbedUnimplementedProcessorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ProcessormustEmbedUnimplementedProcessorCall) Return() *ProcessormustEmbedUnimplementedProcessorCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ProcessormustEmbedUnimplementedProcessorCall) Do(f func()) *ProcessormustEmbedUnimplementedProcessorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ProcessormustEmbedUnimplementedProcessorCall) DoAndReturn(f func()) *ProcessormustEmbedUnimplementedProcessorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
