// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/conduitio/conduit/pkg/plugin (interfaces: Registry)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	log "github.com/conduitio/conduit/pkg/foundation/log"
	plugin "github.com/conduitio/conduit/pkg/plugin"
	gomock "github.com/golang/mock/gomock"
)

// Registry is a mock of Registry interface.
type Registry struct {
	ctrl     *gomock.Controller
	recorder *RegistryMockRecorder
}

// RegistryMockRecorder is the mock recorder for Registry.
type RegistryMockRecorder struct {
	mock *Registry
}

// NewRegistry creates a new mock instance.
func NewRegistry(ctrl *gomock.Controller) *Registry {
	mock := &Registry{ctrl: ctrl}
	mock.recorder = &RegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Registry) EXPECT() *RegistryMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *Registry) List() map[plugin.FullName]plugin.Specification {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].(map[plugin.FullName]plugin.Specification)
	return ret0
}

// List indicates an expected call of List.
func (mr *RegistryMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*Registry)(nil).List))
}

// NewDispenser mocks base method.
func (m *Registry) NewDispenser(arg0 log.CtxLogger, arg1 plugin.FullName) (plugin.Dispenser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDispenser", arg0, arg1)
	ret0, _ := ret[0].(plugin.Dispenser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewDispenser indicates an expected call of NewDispenser.
func (mr *RegistryMockRecorder) NewDispenser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDispenser", reflect.TypeOf((*Registry)(nil).NewDispenser), arg0, arg1)
}
