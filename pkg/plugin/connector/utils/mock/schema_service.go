// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/conduitio/conduit/pkg/plugin/connector/utils (interfaces: SchemaService)
//
// Generated by this command:
//
//	mockgen -destination=mock/schema_service.go -package=mock -mock_names=SchemaService=SchemaService . SchemaService
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	schema "github.com/conduitio/conduit-commons/schema"
	gomock "go.uber.org/mock/gomock"
)

// SchemaService is a mock of SchemaService interface.
type SchemaService struct {
	ctrl     *gomock.Controller
	recorder *SchemaServiceMockRecorder
}

// SchemaServiceMockRecorder is the mock recorder for SchemaService.
type SchemaServiceMockRecorder struct {
	mock *SchemaService
}

// NewSchemaService creates a new mock instance.
func NewSchemaService(ctrl *gomock.Controller) *SchemaService {
	mock := &SchemaService{ctrl: ctrl}
	mock.recorder = &SchemaServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *SchemaService) EXPECT() *SchemaServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *SchemaService) Create(arg0 context.Context, arg1 string, arg2 []byte) (schema.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(schema.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *SchemaServiceMockRecorder) Create(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*SchemaService)(nil).Create), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *SchemaService) Get(arg0 context.Context, arg1 string) (schema.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(schema.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *SchemaServiceMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*SchemaService)(nil).Get), arg0, arg1)
}
