// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/conduitio/conduit-connector-protocol/cplugin (interfaces: SourcePlugin,DestinationPlugin,SpecifierPlugin)
//
// Generated by this command:
//
//	mockgen -destination=cplugin.go -package=internal github.com/conduitio/conduit-connector-protocol/cplugin SourcePlugin,DestinationPlugin,SpecifierPlugin
//

// Package internal is a generated GoMock package.
package internal

import (
	context "context"
	reflect "reflect"

	cplugin "github.com/conduitio/conduit-connector-protocol/cplugin"
	gomock "go.uber.org/mock/gomock"
)

// MockSourcePlugin is a mock of SourcePlugin interface.
type MockSourcePlugin struct {
	ctrl     *gomock.Controller
	recorder *MockSourcePluginMockRecorder
}

// MockSourcePluginMockRecorder is the mock recorder for MockSourcePlugin.
type MockSourcePluginMockRecorder struct {
	mock *MockSourcePlugin
}

// NewMockSourcePlugin creates a new mock instance.
func NewMockSourcePlugin(ctrl *gomock.Controller) *MockSourcePlugin {
	mock := &MockSourcePlugin{ctrl: ctrl}
	mock.recorder = &MockSourcePluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSourcePlugin) EXPECT() *MockSourcePluginMockRecorder {
	return m.recorder
}

// Configure mocks base method.
func (m *MockSourcePlugin) Configure(arg0 context.Context, arg1 cplugin.SourceConfigureRequest) (cplugin.SourceConfigureResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Configure", arg0, arg1)
	ret0, _ := ret[0].(cplugin.SourceConfigureResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Configure indicates an expected call of Configure.
func (mr *MockSourcePluginMockRecorder) Configure(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockSourcePlugin)(nil).Configure), arg0, arg1)
}

// LifecycleOnCreated mocks base method.
func (m *MockSourcePlugin) LifecycleOnCreated(arg0 context.Context, arg1 cplugin.SourceLifecycleOnCreatedRequest) (cplugin.SourceLifecycleOnCreatedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LifecycleOnCreated", arg0, arg1)
	ret0, _ := ret[0].(cplugin.SourceLifecycleOnCreatedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LifecycleOnCreated indicates an expected call of LifecycleOnCreated.
func (mr *MockSourcePluginMockRecorder) LifecycleOnCreated(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LifecycleOnCreated", reflect.TypeOf((*MockSourcePlugin)(nil).LifecycleOnCreated), arg0, arg1)
}

// LifecycleOnDeleted mocks base method.
func (m *MockSourcePlugin) LifecycleOnDeleted(arg0 context.Context, arg1 cplugin.SourceLifecycleOnDeletedRequest) (cplugin.SourceLifecycleOnDeletedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LifecycleOnDeleted", arg0, arg1)
	ret0, _ := ret[0].(cplugin.SourceLifecycleOnDeletedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LifecycleOnDeleted indicates an expected call of LifecycleOnDeleted.
func (mr *MockSourcePluginMockRecorder) LifecycleOnDeleted(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LifecycleOnDeleted", reflect.TypeOf((*MockSourcePlugin)(nil).LifecycleOnDeleted), arg0, arg1)
}

// LifecycleOnUpdated mocks base method.
func (m *MockSourcePlugin) LifecycleOnUpdated(arg0 context.Context, arg1 cplugin.SourceLifecycleOnUpdatedRequest) (cplugin.SourceLifecycleOnUpdatedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LifecycleOnUpdated", arg0, arg1)
	ret0, _ := ret[0].(cplugin.SourceLifecycleOnUpdatedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LifecycleOnUpdated indicates an expected call of LifecycleOnUpdated.
func (mr *MockSourcePluginMockRecorder) LifecycleOnUpdated(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LifecycleOnUpdated", reflect.TypeOf((*MockSourcePlugin)(nil).LifecycleOnUpdated), arg0, arg1)
}

// Open mocks base method.
func (m *MockSourcePlugin) Open(arg0 context.Context, arg1 cplugin.SourceOpenRequest) (cplugin.SourceOpenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", arg0, arg1)
	ret0, _ := ret[0].(cplugin.SourceOpenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockSourcePluginMockRecorder) Open(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockSourcePlugin)(nil).Open), arg0, arg1)
}

// Run mocks base method.
func (m *MockSourcePlugin) Run(arg0 context.Context, arg1 cplugin.SourceRunStream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockSourcePluginMockRecorder) Run(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockSourcePlugin)(nil).Run), arg0, arg1)
}

// Stop mocks base method.
func (m *MockSourcePlugin) Stop(arg0 context.Context, arg1 cplugin.SourceStopRequest) (cplugin.SourceStopResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", arg0, arg1)
	ret0, _ := ret[0].(cplugin.SourceStopResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stop indicates an expected call of Stop.
func (mr *MockSourcePluginMockRecorder) Stop(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockSourcePlugin)(nil).Stop), arg0, arg1)
}

// Teardown mocks base method.
func (m *MockSourcePlugin) Teardown(arg0 context.Context, arg1 cplugin.SourceTeardownRequest) (cplugin.SourceTeardownResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Teardown", arg0, arg1)
	ret0, _ := ret[0].(cplugin.SourceTeardownResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Teardown indicates an expected call of Teardown.
func (mr *MockSourcePluginMockRecorder) Teardown(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Teardown", reflect.TypeOf((*MockSourcePlugin)(nil).Teardown), arg0, arg1)
}

// MockDestinationPlugin is a mock of DestinationPlugin interface.
type MockDestinationPlugin struct {
	ctrl     *gomock.Controller
	recorder *MockDestinationPluginMockRecorder
}

// MockDestinationPluginMockRecorder is the mock recorder for MockDestinationPlugin.
type MockDestinationPluginMockRecorder struct {
	mock *MockDestinationPlugin
}

// NewMockDestinationPlugin creates a new mock instance.
func NewMockDestinationPlugin(ctrl *gomock.Controller) *MockDestinationPlugin {
	mock := &MockDestinationPlugin{ctrl: ctrl}
	mock.recorder = &MockDestinationPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDestinationPlugin) EXPECT() *MockDestinationPluginMockRecorder {
	return m.recorder
}

// Configure mocks base method.
func (m *MockDestinationPlugin) Configure(arg0 context.Context, arg1 cplugin.DestinationConfigureRequest) (cplugin.DestinationConfigureResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Configure", arg0, arg1)
	ret0, _ := ret[0].(cplugin.DestinationConfigureResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Configure indicates an expected call of Configure.
func (mr *MockDestinationPluginMockRecorder) Configure(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockDestinationPlugin)(nil).Configure), arg0, arg1)
}

// LifecycleOnCreated mocks base method.
func (m *MockDestinationPlugin) LifecycleOnCreated(arg0 context.Context, arg1 cplugin.DestinationLifecycleOnCreatedRequest) (cplugin.DestinationLifecycleOnCreatedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LifecycleOnCreated", arg0, arg1)
	ret0, _ := ret[0].(cplugin.DestinationLifecycleOnCreatedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LifecycleOnCreated indicates an expected call of LifecycleOnCreated.
func (mr *MockDestinationPluginMockRecorder) LifecycleOnCreated(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LifecycleOnCreated", reflect.TypeOf((*MockDestinationPlugin)(nil).LifecycleOnCreated), arg0, arg1)
}

// LifecycleOnDeleted mocks base method.
func (m *MockDestinationPlugin) LifecycleOnDeleted(arg0 context.Context, arg1 cplugin.DestinationLifecycleOnDeletedRequest) (cplugin.DestinationLifecycleOnDeletedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LifecycleOnDeleted", arg0, arg1)
	ret0, _ := ret[0].(cplugin.DestinationLifecycleOnDeletedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LifecycleOnDeleted indicates an expected call of LifecycleOnDeleted.
func (mr *MockDestinationPluginMockRecorder) LifecycleOnDeleted(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LifecycleOnDeleted", reflect.TypeOf((*MockDestinationPlugin)(nil).LifecycleOnDeleted), arg0, arg1)
}

// LifecycleOnUpdated mocks base method.
func (m *MockDestinationPlugin) LifecycleOnUpdated(arg0 context.Context, arg1 cplugin.DestinationLifecycleOnUpdatedRequest) (cplugin.DestinationLifecycleOnUpdatedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LifecycleOnUpdated", arg0, arg1)
	ret0, _ := ret[0].(cplugin.DestinationLifecycleOnUpdatedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LifecycleOnUpdated indicates an expected call of LifecycleOnUpdated.
func (mr *MockDestinationPluginMockRecorder) LifecycleOnUpdated(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LifecycleOnUpdated", reflect.TypeOf((*MockDestinationPlugin)(nil).LifecycleOnUpdated), arg0, arg1)
}

// Open mocks base method.
func (m *MockDestinationPlugin) Open(arg0 context.Context, arg1 cplugin.DestinationOpenRequest) (cplugin.DestinationOpenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", arg0, arg1)
	ret0, _ := ret[0].(cplugin.DestinationOpenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockDestinationPluginMockRecorder) Open(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockDestinationPlugin)(nil).Open), arg0, arg1)
}

// Run mocks base method.
func (m *MockDestinationPlugin) Run(arg0 context.Context, arg1 cplugin.DestinationRunStream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockDestinationPluginMockRecorder) Run(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockDestinationPlugin)(nil).Run), arg0, arg1)
}

// Stop mocks base method.
func (m *MockDestinationPlugin) Stop(arg0 context.Context, arg1 cplugin.DestinationStopRequest) (cplugin.DestinationStopResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", arg0, arg1)
	ret0, _ := ret[0].(cplugin.DestinationStopResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stop indicates an expected call of Stop.
func (mr *MockDestinationPluginMockRecorder) Stop(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockDestinationPlugin)(nil).Stop), arg0, arg1)
}

// Teardown mocks base method.
func (m *MockDestinationPlugin) Teardown(arg0 context.Context, arg1 cplugin.DestinationTeardownRequest) (cplugin.DestinationTeardownResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Teardown", arg0, arg1)
	ret0, _ := ret[0].(cplugin.DestinationTeardownResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Teardown indicates an expected call of Teardown.
func (mr *MockDestinationPluginMockRecorder) Teardown(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Teardown", reflect.TypeOf((*MockDestinationPlugin)(nil).Teardown), arg0, arg1)
}

// MockSpecifierPlugin is a mock of SpecifierPlugin interface.
type MockSpecifierPlugin struct {
	ctrl     *gomock.Controller
	recorder *MockSpecifierPluginMockRecorder
}

// MockSpecifierPluginMockRecorder is the mock recorder for MockSpecifierPlugin.
type MockSpecifierPluginMockRecorder struct {
	mock *MockSpecifierPlugin
}

// NewMockSpecifierPlugin creates a new mock instance.
func NewMockSpecifierPlugin(ctrl *gomock.Controller) *MockSpecifierPlugin {
	mock := &MockSpecifierPlugin{ctrl: ctrl}
	mock.recorder = &MockSpecifierPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpecifierPlugin) EXPECT() *MockSpecifierPluginMockRecorder {
	return m.recorder
}

// Specify mocks base method.
func (m *MockSpecifierPlugin) Specify(arg0 context.Context, arg1 cplugin.SpecifierSpecifyRequest) (cplugin.SpecifierSpecifyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Specify", arg0, arg1)
	ret0, _ := ret[0].(cplugin.SpecifierSpecifyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Specify indicates an expected call of Specify.
func (mr *MockSpecifierPluginMockRecorder) Specify(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Specify", reflect.TypeOf((*MockSpecifierPlugin)(nil).Specify), arg0, arg1)
}
