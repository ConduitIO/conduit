// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/conduitio/conduit/pkg/plugin/connector (interfaces: Dispenser,DestinationPlugin,SourcePlugin,SpecifierPlugin)
//
// Generated by this command:
//
//	mockgen -destination=mock/plugin.go -package=mock -mock_names=Dispenser=Dispenser,SourcePlugin=SourcePlugin,DestinationPlugin=DestinationPlugin,SpecifierPlugin=SpecifierPlugin . Dispenser,DestinationPlugin,SourcePlugin,SpecifierPlugin
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	cplugin "github.com/conduitio/conduit-connector-protocol/cplugin"
	connector "github.com/conduitio/conduit/pkg/plugin/connector"
	gomock "go.uber.org/mock/gomock"
)

// Dispenser is a mock of Dispenser interface.
type Dispenser struct {
	ctrl     *gomock.Controller
	recorder *DispenserMockRecorder
}

// DispenserMockRecorder is the mock recorder for Dispenser.
type DispenserMockRecorder struct {
	mock *Dispenser
}

// NewDispenser creates a new mock instance.
func NewDispenser(ctrl *gomock.Controller) *Dispenser {
	mock := &Dispenser{ctrl: ctrl}
	mock.recorder = &DispenserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Dispenser) EXPECT() *DispenserMockRecorder {
	return m.recorder
}

// DispenseDestination mocks base method.
func (m *Dispenser) DispenseDestination() (connector.DestinationPlugin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DispenseDestination")
	ret0, _ := ret[0].(connector.DestinationPlugin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DispenseDestination indicates an expected call of DispenseDestination.
func (mr *DispenserMockRecorder) DispenseDestination() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DispenseDestination", reflect.TypeOf((*Dispenser)(nil).DispenseDestination))
}

// DispenseSource mocks base method.
func (m *Dispenser) DispenseSource() (connector.SourcePlugin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DispenseSource")
	ret0, _ := ret[0].(connector.SourcePlugin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DispenseSource indicates an expected call of DispenseSource.
func (mr *DispenserMockRecorder) DispenseSource() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DispenseSource", reflect.TypeOf((*Dispenser)(nil).DispenseSource))
}

// DispenseSpecifier mocks base method.
func (m *Dispenser) DispenseSpecifier() (connector.SpecifierPlugin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DispenseSpecifier")
	ret0, _ := ret[0].(connector.SpecifierPlugin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DispenseSpecifier indicates an expected call of DispenseSpecifier.
func (mr *DispenserMockRecorder) DispenseSpecifier() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DispenseSpecifier", reflect.TypeOf((*Dispenser)(nil).DispenseSpecifier))
}

// DestinationPlugin is a mock of DestinationPlugin interface.
type DestinationPlugin struct {
	ctrl     *gomock.Controller
	recorder *DestinationPluginMockRecorder
}

// DestinationPluginMockRecorder is the mock recorder for DestinationPlugin.
type DestinationPluginMockRecorder struct {
	mock *DestinationPlugin
}

// NewDestinationPlugin creates a new mock instance.
func NewDestinationPlugin(ctrl *gomock.Controller) *DestinationPlugin {
	mock := &DestinationPlugin{ctrl: ctrl}
	mock.recorder = &DestinationPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *DestinationPlugin) EXPECT() *DestinationPluginMockRecorder {
	return m.recorder
}

// Configure mocks base method.
func (m *DestinationPlugin) Configure(arg0 context.Context, arg1 cplugin.DestinationConfigureRequest) (cplugin.DestinationConfigureResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Configure", arg0, arg1)
	ret0, _ := ret[0].(cplugin.DestinationConfigureResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Configure indicates an expected call of Configure.
func (mr *DestinationPluginMockRecorder) Configure(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*DestinationPlugin)(nil).Configure), arg0, arg1)
}

// LifecycleOnCreated mocks base method.
func (m *DestinationPlugin) LifecycleOnCreated(arg0 context.Context, arg1 cplugin.DestinationLifecycleOnCreatedRequest) (cplugin.DestinationLifecycleOnCreatedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LifecycleOnCreated", arg0, arg1)
	ret0, _ := ret[0].(cplugin.DestinationLifecycleOnCreatedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LifecycleOnCreated indicates an expected call of LifecycleOnCreated.
func (mr *DestinationPluginMockRecorder) LifecycleOnCreated(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LifecycleOnCreated", reflect.TypeOf((*DestinationPlugin)(nil).LifecycleOnCreated), arg0, arg1)
}

// LifecycleOnDeleted mocks base method.
func (m *DestinationPlugin) LifecycleOnDeleted(arg0 context.Context, arg1 cplugin.DestinationLifecycleOnDeletedRequest) (cplugin.DestinationLifecycleOnDeletedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LifecycleOnDeleted", arg0, arg1)
	ret0, _ := ret[0].(cplugin.DestinationLifecycleOnDeletedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LifecycleOnDeleted indicates an expected call of LifecycleOnDeleted.
func (mr *DestinationPluginMockRecorder) LifecycleOnDeleted(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LifecycleOnDeleted", reflect.TypeOf((*DestinationPlugin)(nil).LifecycleOnDeleted), arg0, arg1)
}

// LifecycleOnUpdated mocks base method.
func (m *DestinationPlugin) LifecycleOnUpdated(arg0 context.Context, arg1 cplugin.DestinationLifecycleOnUpdatedRequest) (cplugin.DestinationLifecycleOnUpdatedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LifecycleOnUpdated", arg0, arg1)
	ret0, _ := ret[0].(cplugin.DestinationLifecycleOnUpdatedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LifecycleOnUpdated indicates an expected call of LifecycleOnUpdated.
func (mr *DestinationPluginMockRecorder) LifecycleOnUpdated(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LifecycleOnUpdated", reflect.TypeOf((*DestinationPlugin)(nil).LifecycleOnUpdated), arg0, arg1)
}

// NewStream mocks base method.
func (m *DestinationPlugin) NewStream() cplugin.DestinationRunStream {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewStream")
	ret0, _ := ret[0].(cplugin.DestinationRunStream)
	return ret0
}

// NewStream indicates an expected call of NewStream.
func (mr *DestinationPluginMockRecorder) NewStream() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewStream", reflect.TypeOf((*DestinationPlugin)(nil).NewStream))
}

// Open mocks base method.
func (m *DestinationPlugin) Open(arg0 context.Context, arg1 cplugin.DestinationOpenRequest) (cplugin.DestinationOpenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", arg0, arg1)
	ret0, _ := ret[0].(cplugin.DestinationOpenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *DestinationPluginMockRecorder) Open(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*DestinationPlugin)(nil).Open), arg0, arg1)
}

// Run mocks base method.
func (m *DestinationPlugin) Run(arg0 context.Context, arg1 cplugin.DestinationRunStream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *DestinationPluginMockRecorder) Run(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*DestinationPlugin)(nil).Run), arg0, arg1)
}

// Stop mocks base method.
func (m *DestinationPlugin) Stop(arg0 context.Context, arg1 cplugin.DestinationStopRequest) (cplugin.DestinationStopResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", arg0, arg1)
	ret0, _ := ret[0].(cplugin.DestinationStopResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stop indicates an expected call of Stop.
func (mr *DestinationPluginMockRecorder) Stop(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*DestinationPlugin)(nil).Stop), arg0, arg1)
}

// Teardown mocks base method.
func (m *DestinationPlugin) Teardown(arg0 context.Context, arg1 cplugin.DestinationTeardownRequest) (cplugin.DestinationTeardownResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Teardown", arg0, arg1)
	ret0, _ := ret[0].(cplugin.DestinationTeardownResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Teardown indicates an expected call of Teardown.
func (mr *DestinationPluginMockRecorder) Teardown(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Teardown", reflect.TypeOf((*DestinationPlugin)(nil).Teardown), arg0, arg1)
}

// SourcePlugin is a mock of SourcePlugin interface.
type SourcePlugin struct {
	ctrl     *gomock.Controller
	recorder *SourcePluginMockRecorder
}

// SourcePluginMockRecorder is the mock recorder for SourcePlugin.
type SourcePluginMockRecorder struct {
	mock *SourcePlugin
}

// NewSourcePlugin creates a new mock instance.
func NewSourcePlugin(ctrl *gomock.Controller) *SourcePlugin {
	mock := &SourcePlugin{ctrl: ctrl}
	mock.recorder = &SourcePluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *SourcePlugin) EXPECT() *SourcePluginMockRecorder {
	return m.recorder
}

// Configure mocks base method.
func (m *SourcePlugin) Configure(arg0 context.Context, arg1 cplugin.SourceConfigureRequest) (cplugin.SourceConfigureResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Configure", arg0, arg1)
	ret0, _ := ret[0].(cplugin.SourceConfigureResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Configure indicates an expected call of Configure.
func (mr *SourcePluginMockRecorder) Configure(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*SourcePlugin)(nil).Configure), arg0, arg1)
}

// LifecycleOnCreated mocks base method.
func (m *SourcePlugin) LifecycleOnCreated(arg0 context.Context, arg1 cplugin.SourceLifecycleOnCreatedRequest) (cplugin.SourceLifecycleOnCreatedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LifecycleOnCreated", arg0, arg1)
	ret0, _ := ret[0].(cplugin.SourceLifecycleOnCreatedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LifecycleOnCreated indicates an expected call of LifecycleOnCreated.
func (mr *SourcePluginMockRecorder) LifecycleOnCreated(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LifecycleOnCreated", reflect.TypeOf((*SourcePlugin)(nil).LifecycleOnCreated), arg0, arg1)
}

// LifecycleOnDeleted mocks base method.
func (m *SourcePlugin) LifecycleOnDeleted(arg0 context.Context, arg1 cplugin.SourceLifecycleOnDeletedRequest) (cplugin.SourceLifecycleOnDeletedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LifecycleOnDeleted", arg0, arg1)
	ret0, _ := ret[0].(cplugin.SourceLifecycleOnDeletedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LifecycleOnDeleted indicates an expected call of LifecycleOnDeleted.
func (mr *SourcePluginMockRecorder) LifecycleOnDeleted(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LifecycleOnDeleted", reflect.TypeOf((*SourcePlugin)(nil).LifecycleOnDeleted), arg0, arg1)
}

// LifecycleOnUpdated mocks base method.
func (m *SourcePlugin) LifecycleOnUpdated(arg0 context.Context, arg1 cplugin.SourceLifecycleOnUpdatedRequest) (cplugin.SourceLifecycleOnUpdatedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LifecycleOnUpdated", arg0, arg1)
	ret0, _ := ret[0].(cplugin.SourceLifecycleOnUpdatedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LifecycleOnUpdated indicates an expected call of LifecycleOnUpdated.
func (mr *SourcePluginMockRecorder) LifecycleOnUpdated(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LifecycleOnUpdated", reflect.TypeOf((*SourcePlugin)(nil).LifecycleOnUpdated), arg0, arg1)
}

// NewStream mocks base method.
func (m *SourcePlugin) NewStream() cplugin.SourceRunStream {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewStream")
	ret0, _ := ret[0].(cplugin.SourceRunStream)
	return ret0
}

// NewStream indicates an expected call of NewStream.
func (mr *SourcePluginMockRecorder) NewStream() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewStream", reflect.TypeOf((*SourcePlugin)(nil).NewStream))
}

// Open mocks base method.
func (m *SourcePlugin) Open(arg0 context.Context, arg1 cplugin.SourceOpenRequest) (cplugin.SourceOpenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", arg0, arg1)
	ret0, _ := ret[0].(cplugin.SourceOpenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *SourcePluginMockRecorder) Open(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*SourcePlugin)(nil).Open), arg0, arg1)
}

// Run mocks base method.
func (m *SourcePlugin) Run(arg0 context.Context, arg1 cplugin.SourceRunStream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *SourcePluginMockRecorder) Run(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*SourcePlugin)(nil).Run), arg0, arg1)
}

// Stop mocks base method.
func (m *SourcePlugin) Stop(arg0 context.Context, arg1 cplugin.SourceStopRequest) (cplugin.SourceStopResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", arg0, arg1)
	ret0, _ := ret[0].(cplugin.SourceStopResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stop indicates an expected call of Stop.
func (mr *SourcePluginMockRecorder) Stop(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*SourcePlugin)(nil).Stop), arg0, arg1)
}

// Teardown mocks base method.
func (m *SourcePlugin) Teardown(arg0 context.Context, arg1 cplugin.SourceTeardownRequest) (cplugin.SourceTeardownResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Teardown", arg0, arg1)
	ret0, _ := ret[0].(cplugin.SourceTeardownResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Teardown indicates an expected call of Teardown.
func (mr *SourcePluginMockRecorder) Teardown(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Teardown", reflect.TypeOf((*SourcePlugin)(nil).Teardown), arg0, arg1)
}

// SpecifierPlugin is a mock of SpecifierPlugin interface.
type SpecifierPlugin struct {
	ctrl     *gomock.Controller
	recorder *SpecifierPluginMockRecorder
}

// SpecifierPluginMockRecorder is the mock recorder for SpecifierPlugin.
type SpecifierPluginMockRecorder struct {
	mock *SpecifierPlugin
}

// NewSpecifierPlugin creates a new mock instance.
func NewSpecifierPlugin(ctrl *gomock.Controller) *SpecifierPlugin {
	mock := &SpecifierPlugin{ctrl: ctrl}
	mock.recorder = &SpecifierPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *SpecifierPlugin) EXPECT() *SpecifierPluginMockRecorder {
	return m.recorder
}

// Specify mocks base method.
func (m *SpecifierPlugin) Specify(arg0 context.Context, arg1 cplugin.SpecifierSpecifyRequest) (cplugin.SpecifierSpecifyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Specify", arg0, arg1)
	ret0, _ := ret[0].(cplugin.SpecifierSpecifyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Specify indicates an expected call of Specify.
func (mr *SpecifierPluginMockRecorder) Specify(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Specify", reflect.TypeOf((*SpecifierPlugin)(nil).Specify), arg0, arg1)
}
