// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/conduitio/conduit/proto/api/v1 (interfaces: ConnectorService_InspectConnectorServer)
//
// Generated by this command:
//
//	mockgen -typed -destination=mock/connector_service.go -package=mock -mock_names=ConnectorService_InspectConnectorServer=ConnectorService_InspectConnectorServer github.com/conduitio/conduit/proto/api/v1 ConnectorService_InspectConnectorServer
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	apiv1 "github.com/conduitio/conduit/proto/api/v1"
	gomock "go.uber.org/mock/gomock"
	metadata "google.golang.org/grpc/metadata"
)

// ConnectorService_InspectConnectorServer is a mock of ConnectorService_InspectConnectorServer interface.
type ConnectorService_InspectConnectorServer struct {
	ctrl     *gomock.Controller
	recorder *ConnectorService_InspectConnectorServerMockRecorder
	isgomock struct{}
}

// ConnectorService_InspectConnectorServerMockRecorder is the mock recorder for ConnectorService_InspectConnectorServer.
type ConnectorService_InspectConnectorServerMockRecorder struct {
	mock *ConnectorService_InspectConnectorServer
}

// NewConnectorService_InspectConnectorServer creates a new mock instance.
func NewConnectorService_InspectConnectorServer(ctrl *gomock.Controller) *ConnectorService_InspectConnectorServer {
	mock := &ConnectorService_InspectConnectorServer{ctrl: ctrl}
	mock.recorder = &ConnectorService_InspectConnectorServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ConnectorService_InspectConnectorServer) EXPECT() *ConnectorService_InspectConnectorServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *ConnectorService_InspectConnectorServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *ConnectorService_InspectConnectorServerMockRecorder) Context() *ConnectorService_InspectConnectorServerContextCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*ConnectorService_InspectConnectorServer)(nil).Context))
	return &ConnectorService_InspectConnectorServerContextCall{Call: call}
}

// ConnectorService_InspectConnectorServerContextCall wrap *gomock.Call
type ConnectorService_InspectConnectorServerContextCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ConnectorService_InspectConnectorServerContextCall) Return(arg0 context.Context) *ConnectorService_InspectConnectorServerContextCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ConnectorService_InspectConnectorServerContextCall) Do(f func() context.Context) *ConnectorService_InspectConnectorServerContextCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ConnectorService_InspectConnectorServerContextCall) DoAndReturn(f func() context.Context) *ConnectorService_InspectConnectorServerContextCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RecvMsg mocks base method.
func (m_2 *ConnectorService_InspectConnectorServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *ConnectorService_InspectConnectorServerMockRecorder) RecvMsg(m any) *ConnectorService_InspectConnectorServerRecvMsgCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*ConnectorService_InspectConnectorServer)(nil).RecvMsg), m)
	return &ConnectorService_InspectConnectorServerRecvMsgCall{Call: call}
}

// ConnectorService_InspectConnectorServerRecvMsgCall wrap *gomock.Call
type ConnectorService_InspectConnectorServerRecvMsgCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ConnectorService_InspectConnectorServerRecvMsgCall) Return(arg0 error) *ConnectorService_InspectConnectorServerRecvMsgCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ConnectorService_InspectConnectorServerRecvMsgCall) Do(f func(any) error) *ConnectorService_InspectConnectorServerRecvMsgCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ConnectorService_InspectConnectorServerRecvMsgCall) DoAndReturn(f func(any) error) *ConnectorService_InspectConnectorServerRecvMsgCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Send mocks base method.
func (m *ConnectorService_InspectConnectorServer) Send(arg0 *apiv1.InspectConnectorResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *ConnectorService_InspectConnectorServerMockRecorder) Send(arg0 any) *ConnectorService_InspectConnectorServerSendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*ConnectorService_InspectConnectorServer)(nil).Send), arg0)
	return &ConnectorService_InspectConnectorServerSendCall{Call: call}
}

// ConnectorService_InspectConnectorServerSendCall wrap *gomock.Call
type ConnectorService_InspectConnectorServerSendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ConnectorService_InspectConnectorServerSendCall) Return(arg0 error) *ConnectorService_InspectConnectorServerSendCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ConnectorService_InspectConnectorServerSendCall) Do(f func(*apiv1.InspectConnectorResponse) error) *ConnectorService_InspectConnectorServerSendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ConnectorService_InspectConnectorServerSendCall) DoAndReturn(f func(*apiv1.InspectConnectorResponse) error) *ConnectorService_InspectConnectorServerSendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SendHeader mocks base method.
func (m *ConnectorService_InspectConnectorServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *ConnectorService_InspectConnectorServerMockRecorder) SendHeader(arg0 any) *ConnectorService_InspectConnectorServerSendHeaderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*ConnectorService_InspectConnectorServer)(nil).SendHeader), arg0)
	return &ConnectorService_InspectConnectorServerSendHeaderCall{Call: call}
}

// ConnectorService_InspectConnectorServerSendHeaderCall wrap *gomock.Call
type ConnectorService_InspectConnectorServerSendHeaderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ConnectorService_InspectConnectorServerSendHeaderCall) Return(arg0 error) *ConnectorService_InspectConnectorServerSendHeaderCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ConnectorService_InspectConnectorServerSendHeaderCall) Do(f func(metadata.MD) error) *ConnectorService_InspectConnectorServerSendHeaderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ConnectorService_InspectConnectorServerSendHeaderCall) DoAndReturn(f func(metadata.MD) error) *ConnectorService_InspectConnectorServerSendHeaderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SendMsg mocks base method.
func (m_2 *ConnectorService_InspectConnectorServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *ConnectorService_InspectConnectorServerMockRecorder) SendMsg(m any) *ConnectorService_InspectConnectorServerSendMsgCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*ConnectorService_InspectConnectorServer)(nil).SendMsg), m)
	return &ConnectorService_InspectConnectorServerSendMsgCall{Call: call}
}

// ConnectorService_InspectConnectorServerSendMsgCall wrap *gomock.Call
type ConnectorService_InspectConnectorServerSendMsgCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ConnectorService_InspectConnectorServerSendMsgCall) Return(arg0 error) *ConnectorService_InspectConnectorServerSendMsgCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ConnectorService_InspectConnectorServerSendMsgCall) Do(f func(any) error) *ConnectorService_InspectConnectorServerSendMsgCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ConnectorService_InspectConnectorServerSendMsgCall) DoAndReturn(f func(any) error) *ConnectorService_InspectConnectorServerSendMsgCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetHeader mocks base method.
func (m *ConnectorService_InspectConnectorServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *ConnectorService_InspectConnectorServerMockRecorder) SetHeader(arg0 any) *ConnectorService_InspectConnectorServerSetHeaderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*ConnectorService_InspectConnectorServer)(nil).SetHeader), arg0)
	return &ConnectorService_InspectConnectorServerSetHeaderCall{Call: call}
}

// ConnectorService_InspectConnectorServerSetHeaderCall wrap *gomock.Call
type ConnectorService_InspectConnectorServerSetHeaderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ConnectorService_InspectConnectorServerSetHeaderCall) Return(arg0 error) *ConnectorService_InspectConnectorServerSetHeaderCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ConnectorService_InspectConnectorServerSetHeaderCall) Do(f func(metadata.MD) error) *ConnectorService_InspectConnectorServerSetHeaderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ConnectorService_InspectConnectorServerSetHeaderCall) DoAndReturn(f func(metadata.MD) error) *ConnectorService_InspectConnectorServerSetHeaderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetTrailer mocks base method.
func (m *ConnectorService_InspectConnectorServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *ConnectorService_InspectConnectorServerMockRecorder) SetTrailer(arg0 any) *ConnectorService_InspectConnectorServerSetTrailerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*ConnectorService_InspectConnectorServer)(nil).SetTrailer), arg0)
	return &ConnectorService_InspectConnectorServerSetTrailerCall{Call: call}
}

// ConnectorService_InspectConnectorServerSetTrailerCall wrap *gomock.Call
type ConnectorService_InspectConnectorServerSetTrailerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ConnectorService_InspectConnectorServerSetTrailerCall) Return() *ConnectorService_InspectConnectorServerSetTrailerCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ConnectorService_InspectConnectorServerSetTrailerCall) Do(f func(metadata.MD)) *ConnectorService_InspectConnectorServerSetTrailerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ConnectorService_InspectConnectorServerSetTrailerCall) DoAndReturn(f func(metadata.MD)) *ConnectorService_InspectConnectorServerSetTrailerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
