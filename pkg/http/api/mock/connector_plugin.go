// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/conduitio/conduit/pkg/http/api (interfaces: ConnectorPluginOrchestrator)
//
// Generated by this command:
//
//	mockgen -typed -destination=mock/connector_plugin.go -package=mock -mock_names=ConnectorPluginOrchestrator=ConnectorPluginOrchestrator . ConnectorPluginOrchestrator
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	pconnector "github.com/conduitio/conduit-connector-protocol/pconnector"
	gomock "go.uber.org/mock/gomock"
)

// ConnectorPluginOrchestrator is a mock of ConnectorPluginOrchestrator interface.
type ConnectorPluginOrchestrator struct {
	ctrl     *gomock.Controller
	recorder *ConnectorPluginOrchestratorMockRecorder
	isgomock struct{}
}

// ConnectorPluginOrchestratorMockRecorder is the mock recorder for ConnectorPluginOrchestrator.
type ConnectorPluginOrchestratorMockRecorder struct {
	mock *ConnectorPluginOrchestrator
}

// NewConnectorPluginOrchestrator creates a new mock instance.
func NewConnectorPluginOrchestrator(ctrl *gomock.Controller) *ConnectorPluginOrchestrator {
	mock := &ConnectorPluginOrchestrator{ctrl: ctrl}
	mock.recorder = &ConnectorPluginOrchestratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ConnectorPluginOrchestrator) EXPECT() *ConnectorPluginOrchestratorMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *ConnectorPluginOrchestrator) List(ctx context.Context) (map[string]pconnector.Specification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].(map[string]pconnector.Specification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *ConnectorPluginOrchestratorMockRecorder) List(ctx any) *ConnectorPluginOrchestratorListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*ConnectorPluginOrchestrator)(nil).List), ctx)
	return &ConnectorPluginOrchestratorListCall{Call: call}
}

// ConnectorPluginOrchestratorListCall wrap *gomock.Call
type ConnectorPluginOrchestratorListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ConnectorPluginOrchestratorListCall) Return(arg0 map[string]pconnector.Specification, arg1 error) *ConnectorPluginOrchestratorListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ConnectorPluginOrchestratorListCall) Do(f func(context.Context) (map[string]pconnector.Specification, error)) *ConnectorPluginOrchestratorListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ConnectorPluginOrchestratorListCall) DoAndReturn(f func(context.Context) (map[string]pconnector.Specification, error)) *ConnectorPluginOrchestratorListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
