// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/conduitio/conduit/proto/api/v1 (interfaces: ProcessorService_InspectProcessorInServer)
//
// Generated by this command:
//
//	mockgen -typed -destination=mock/processor_service_in.go -package=mock -mock_names=ProcessorService_InspectProcessorInServer=ProcessorService_InspectProcessorInServer github.com/conduitio/conduit/proto/api/v1 ProcessorService_InspectProcessorInServer
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	apiv1 "github.com/conduitio/conduit/proto/api/v1"
	gomock "go.uber.org/mock/gomock"
	metadata "google.golang.org/grpc/metadata"
)

// ProcessorService_InspectProcessorInServer is a mock of ProcessorService_InspectProcessorInServer interface.
type ProcessorService_InspectProcessorInServer struct {
	ctrl     *gomock.Controller
	recorder *ProcessorService_InspectProcessorInServerMockRecorder
	isgomock struct{}
}

// ProcessorService_InspectProcessorInServerMockRecorder is the mock recorder for ProcessorService_InspectProcessorInServer.
type ProcessorService_InspectProcessorInServerMockRecorder struct {
	mock *ProcessorService_InspectProcessorInServer
}

// NewProcessorService_InspectProcessorInServer creates a new mock instance.
func NewProcessorService_InspectProcessorInServer(ctrl *gomock.Controller) *ProcessorService_InspectProcessorInServer {
	mock := &ProcessorService_InspectProcessorInServer{ctrl: ctrl}
	mock.recorder = &ProcessorService_InspectProcessorInServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ProcessorService_InspectProcessorInServer) EXPECT() *ProcessorService_InspectProcessorInServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *ProcessorService_InspectProcessorInServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *ProcessorService_InspectProcessorInServerMockRecorder) Context() *ProcessorService_InspectProcessorInServerContextCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*ProcessorService_InspectProcessorInServer)(nil).Context))
	return &ProcessorService_InspectProcessorInServerContextCall{Call: call}
}

// ProcessorService_InspectProcessorInServerContextCall wrap *gomock.Call
type ProcessorService_InspectProcessorInServerContextCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ProcessorService_InspectProcessorInServerContextCall) Return(arg0 context.Context) *ProcessorService_InspectProcessorInServerContextCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ProcessorService_InspectProcessorInServerContextCall) Do(f func() context.Context) *ProcessorService_InspectProcessorInServerContextCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ProcessorService_InspectProcessorInServerContextCall) DoAndReturn(f func() context.Context) *ProcessorService_InspectProcessorInServerContextCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RecvMsg mocks base method.
func (m_2 *ProcessorService_InspectProcessorInServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *ProcessorService_InspectProcessorInServerMockRecorder) RecvMsg(m any) *ProcessorService_InspectProcessorInServerRecvMsgCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*ProcessorService_InspectProcessorInServer)(nil).RecvMsg), m)
	return &ProcessorService_InspectProcessorInServerRecvMsgCall{Call: call}
}

// ProcessorService_InspectProcessorInServerRecvMsgCall wrap *gomock.Call
type ProcessorService_InspectProcessorInServerRecvMsgCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ProcessorService_InspectProcessorInServerRecvMsgCall) Return(arg0 error) *ProcessorService_InspectProcessorInServerRecvMsgCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ProcessorService_InspectProcessorInServerRecvMsgCall) Do(f func(any) error) *ProcessorService_InspectProcessorInServerRecvMsgCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ProcessorService_InspectProcessorInServerRecvMsgCall) DoAndReturn(f func(any) error) *ProcessorService_InspectProcessorInServerRecvMsgCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Send mocks base method.
func (m *ProcessorService_InspectProcessorInServer) Send(arg0 *apiv1.InspectProcessorInResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *ProcessorService_InspectProcessorInServerMockRecorder) Send(arg0 any) *ProcessorService_InspectProcessorInServerSendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*ProcessorService_InspectProcessorInServer)(nil).Send), arg0)
	return &ProcessorService_InspectProcessorInServerSendCall{Call: call}
}

// ProcessorService_InspectProcessorInServerSendCall wrap *gomock.Call
type ProcessorService_InspectProcessorInServerSendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ProcessorService_InspectProcessorInServerSendCall) Return(arg0 error) *ProcessorService_InspectProcessorInServerSendCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ProcessorService_InspectProcessorInServerSendCall) Do(f func(*apiv1.InspectProcessorInResponse) error) *ProcessorService_InspectProcessorInServerSendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ProcessorService_InspectProcessorInServerSendCall) DoAndReturn(f func(*apiv1.InspectProcessorInResponse) error) *ProcessorService_InspectProcessorInServerSendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SendHeader mocks base method.
func (m *ProcessorService_InspectProcessorInServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *ProcessorService_InspectProcessorInServerMockRecorder) SendHeader(arg0 any) *ProcessorService_InspectProcessorInServerSendHeaderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*ProcessorService_InspectProcessorInServer)(nil).SendHeader), arg0)
	return &ProcessorService_InspectProcessorInServerSendHeaderCall{Call: call}
}

// ProcessorService_InspectProcessorInServerSendHeaderCall wrap *gomock.Call
type ProcessorService_InspectProcessorInServerSendHeaderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ProcessorService_InspectProcessorInServerSendHeaderCall) Return(arg0 error) *ProcessorService_InspectProcessorInServerSendHeaderCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ProcessorService_InspectProcessorInServerSendHeaderCall) Do(f func(metadata.MD) error) *ProcessorService_InspectProcessorInServerSendHeaderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ProcessorService_InspectProcessorInServerSendHeaderCall) DoAndReturn(f func(metadata.MD) error) *ProcessorService_InspectProcessorInServerSendHeaderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SendMsg mocks base method.
func (m_2 *ProcessorService_InspectProcessorInServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *ProcessorService_InspectProcessorInServerMockRecorder) SendMsg(m any) *ProcessorService_InspectProcessorInServerSendMsgCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*ProcessorService_InspectProcessorInServer)(nil).SendMsg), m)
	return &ProcessorService_InspectProcessorInServerSendMsgCall{Call: call}
}

// ProcessorService_InspectProcessorInServerSendMsgCall wrap *gomock.Call
type ProcessorService_InspectProcessorInServerSendMsgCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ProcessorService_InspectProcessorInServerSendMsgCall) Return(arg0 error) *ProcessorService_InspectProcessorInServerSendMsgCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ProcessorService_InspectProcessorInServerSendMsgCall) Do(f func(any) error) *ProcessorService_InspectProcessorInServerSendMsgCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ProcessorService_InspectProcessorInServerSendMsgCall) DoAndReturn(f func(any) error) *ProcessorService_InspectProcessorInServerSendMsgCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetHeader mocks base method.
func (m *ProcessorService_InspectProcessorInServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *ProcessorService_InspectProcessorInServerMockRecorder) SetHeader(arg0 any) *ProcessorService_InspectProcessorInServerSetHeaderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*ProcessorService_InspectProcessorInServer)(nil).SetHeader), arg0)
	return &ProcessorService_InspectProcessorInServerSetHeaderCall{Call: call}
}

// ProcessorService_InspectProcessorInServerSetHeaderCall wrap *gomock.Call
type ProcessorService_InspectProcessorInServerSetHeaderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ProcessorService_InspectProcessorInServerSetHeaderCall) Return(arg0 error) *ProcessorService_InspectProcessorInServerSetHeaderCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ProcessorService_InspectProcessorInServerSetHeaderCall) Do(f func(metadata.MD) error) *ProcessorService_InspectProcessorInServerSetHeaderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ProcessorService_InspectProcessorInServerSetHeaderCall) DoAndReturn(f func(metadata.MD) error) *ProcessorService_InspectProcessorInServerSetHeaderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetTrailer mocks base method.
func (m *ProcessorService_InspectProcessorInServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *ProcessorService_InspectProcessorInServerMockRecorder) SetTrailer(arg0 any) *ProcessorService_InspectProcessorInServerSetTrailerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*ProcessorService_InspectProcessorInServer)(nil).SetTrailer), arg0)
	return &ProcessorService_InspectProcessorInServerSetTrailerCall{Call: call}
}

// ProcessorService_InspectProcessorInServerSetTrailerCall wrap *gomock.Call
type ProcessorService_InspectProcessorInServerSetTrailerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ProcessorService_InspectProcessorInServerSetTrailerCall) Return() *ProcessorService_InspectProcessorInServerSetTrailerCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ProcessorService_InspectProcessorInServerSetTrailerCall) Do(f func(metadata.MD)) *ProcessorService_InspectProcessorInServerSetTrailerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ProcessorService_InspectProcessorInServerSetTrailerCall) DoAndReturn(f func(metadata.MD)) *ProcessorService_InspectProcessorInServerSetTrailerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
