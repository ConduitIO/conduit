// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/conduitio/conduit/pkg/foundation/database (interfaces: DB)
//
// Generated by this command:
//
//	mockgen -typed -destination=mock/database.go -package=mock -mock_names=DB=DB . DB
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	database "github.com/conduitio/conduit/pkg/foundation/database"
	gomock "go.uber.org/mock/gomock"
)

// DB is a mock of DB interface.
type DB struct {
	ctrl     *gomock.Controller
	recorder *DBMockRecorder
}

// DBMockRecorder is the mock recorder for DB.
type DBMockRecorder struct {
	mock *DB
}

// NewDB creates a new mock instance.
func NewDB(ctrl *gomock.Controller) *DB {
	mock := &DB{ctrl: ctrl}
	mock.recorder = &DBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *DB) EXPECT() *DBMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *DB) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *DBMockRecorder) Close() *DBCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*DB)(nil).Close))
	return &DBCloseCall{Call: call}
}

// DBCloseCall wrap *gomock.Call
type DBCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *DBCloseCall) Return(arg0 error) *DBCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *DBCloseCall) Do(f func() error) *DBCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *DBCloseCall) DoAndReturn(f func() error) *DBCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *DB) Get(arg0 context.Context, arg1 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *DBMockRecorder) Get(arg0, arg1 any) *DBGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*DB)(nil).Get), arg0, arg1)
	return &DBGetCall{Call: call}
}

// DBGetCall wrap *gomock.Call
type DBGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *DBGetCall) Return(arg0 []byte, arg1 error) *DBGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *DBGetCall) Do(f func(context.Context, string) ([]byte, error)) *DBGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *DBGetCall) DoAndReturn(f func(context.Context, string) ([]byte, error)) *DBGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetKeys mocks base method.
func (m *DB) GetKeys(arg0 context.Context, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeys", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeys indicates an expected call of GetKeys.
func (mr *DBMockRecorder) GetKeys(arg0, arg1 any) *DBGetKeysCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeys", reflect.TypeOf((*DB)(nil).GetKeys), arg0, arg1)
	return &DBGetKeysCall{Call: call}
}

// DBGetKeysCall wrap *gomock.Call
type DBGetKeysCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *DBGetKeysCall) Return(arg0 []string, arg1 error) *DBGetKeysCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *DBGetKeysCall) Do(f func(context.Context, string) ([]string, error)) *DBGetKeysCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *DBGetKeysCall) DoAndReturn(f func(context.Context, string) ([]string, error)) *DBGetKeysCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NewTransaction mocks base method.
func (m *DB) NewTransaction(arg0 context.Context, arg1 bool) (database.Transaction, context.Context, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTransaction", arg0, arg1)
	ret0, _ := ret[0].(database.Transaction)
	ret1, _ := ret[1].(context.Context)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// NewTransaction indicates an expected call of NewTransaction.
func (mr *DBMockRecorder) NewTransaction(arg0, arg1 any) *DBNewTransactionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTransaction", reflect.TypeOf((*DB)(nil).NewTransaction), arg0, arg1)
	return &DBNewTransactionCall{Call: call}
}

// DBNewTransactionCall wrap *gomock.Call
type DBNewTransactionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *DBNewTransactionCall) Return(arg0 database.Transaction, arg1 context.Context, arg2 error) *DBNewTransactionCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *DBNewTransactionCall) Do(f func(context.Context, bool) (database.Transaction, context.Context, error)) *DBNewTransactionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *DBNewTransactionCall) DoAndReturn(f func(context.Context, bool) (database.Transaction, context.Context, error)) *DBNewTransactionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Ping mocks base method.
func (m *DB) Ping(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *DBMockRecorder) Ping(arg0 any) *DBPingCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*DB)(nil).Ping), arg0)
	return &DBPingCall{Call: call}
}

// DBPingCall wrap *gomock.Call
type DBPingCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *DBPingCall) Return(arg0 error) *DBPingCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *DBPingCall) Do(f func(context.Context) error) *DBPingCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *DBPingCall) DoAndReturn(f func(context.Context) error) *DBPingCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Set mocks base method.
func (m *DB) Set(arg0 context.Context, arg1 string, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *DBMockRecorder) Set(arg0, arg1, arg2 any) *DBSetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*DB)(nil).Set), arg0, arg1, arg2)
	return &DBSetCall{Call: call}
}

// DBSetCall wrap *gomock.Call
type DBSetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *DBSetCall) Return(arg0 error) *DBSetCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *DBSetCall) Do(f func(context.Context, string, []byte) error) *DBSetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *DBSetCall) DoAndReturn(f func(context.Context, string, []byte) error) *DBSetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
