// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/conduitio/conduit/pkg/lifecycle-poc/funnel (interfaces: Processor)
//
// Generated by this command:
//
//	mockgen -typed -destination=processor_mock_test.go -package=funnel . Processor
//

// Package funnel is a generated GoMock package.
package funnel

import (
	context "context"
	reflect "reflect"

	opencdc "github.com/conduitio/conduit-commons/opencdc"
	sdk "github.com/conduitio/conduit-processor-sdk"
	gomock "go.uber.org/mock/gomock"
)

// MockProcessor is a mock of Processor interface.
type MockProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockProcessorMockRecorder
	isgomock struct{}
}

// MockProcessorMockRecorder is the mock recorder for MockProcessor.
type MockProcessorMockRecorder struct {
	mock *MockProcessor
}

// NewMockProcessor creates a new mock instance.
func NewMockProcessor(ctrl *gomock.Controller) *MockProcessor {
	mock := &MockProcessor{ctrl: ctrl}
	mock.recorder = &MockProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessor) EXPECT() *MockProcessorMockRecorder {
	return m.recorder
}

// Open mocks base method.
func (m *MockProcessor) Open(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open.
func (mr *MockProcessorMockRecorder) Open(ctx any) *MockProcessorOpenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockProcessor)(nil).Open), ctx)
	return &MockProcessorOpenCall{Call: call}
}

// MockProcessorOpenCall wrap *gomock.Call
type MockProcessorOpenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProcessorOpenCall) Return(arg0 error) *MockProcessorOpenCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProcessorOpenCall) Do(f func(context.Context) error) *MockProcessorOpenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProcessorOpenCall) DoAndReturn(f func(context.Context) error) *MockProcessorOpenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Process mocks base method.
func (m *MockProcessor) Process(arg0 context.Context, arg1 []opencdc.Record) []sdk.ProcessedRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", arg0, arg1)
	ret0, _ := ret[0].([]sdk.ProcessedRecord)
	return ret0
}

// Process indicates an expected call of Process.
func (mr *MockProcessorMockRecorder) Process(arg0, arg1 any) *MockProcessorProcessCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockProcessor)(nil).Process), arg0, arg1)
	return &MockProcessorProcessCall{Call: call}
}

// MockProcessorProcessCall wrap *gomock.Call
type MockProcessorProcessCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProcessorProcessCall) Return(arg0 []sdk.ProcessedRecord) *MockProcessorProcessCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProcessorProcessCall) Do(f func(context.Context, []opencdc.Record) []sdk.ProcessedRecord) *MockProcessorProcessCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProcessorProcessCall) DoAndReturn(f func(context.Context, []opencdc.Record) []sdk.ProcessedRecord) *MockProcessorProcessCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Teardown mocks base method.
func (m *MockProcessor) Teardown(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Teardown", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Teardown indicates an expected call of Teardown.
func (mr *MockProcessorMockRecorder) Teardown(arg0 any) *MockProcessorTeardownCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Teardown", reflect.TypeOf((*MockProcessor)(nil).Teardown), arg0)
	return &MockProcessorTeardownCall{Call: call}
}

// MockProcessorTeardownCall wrap *gomock.Call
type MockProcessorTeardownCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProcessorTeardownCall) Return(arg0 error) *MockProcessorTeardownCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProcessorTeardownCall) Do(f func(context.Context) error) *MockProcessorTeardownCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProcessorTeardownCall) DoAndReturn(f func(context.Context) error) *MockProcessorTeardownCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
