// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/conduitio/conduit/pkg/lifecycle-poc/funnel (interfaces: Processor)
//
// Generated by this command:
//
//	mockgen -typed -destination=mock/processor.go -package=mock -mock_names=Processor=Processor . Processor
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	opencdc "github.com/conduitio/conduit-commons/opencdc"
	sdk "github.com/conduitio/conduit-processor-sdk"
	gomock "go.uber.org/mock/gomock"
)

// Processor is a mock of Processor interface.
type Processor struct {
	ctrl     *gomock.Controller
	recorder *ProcessorMockRecorder
}

// ProcessorMockRecorder is the mock recorder for Processor.
type ProcessorMockRecorder struct {
	mock *Processor
}

// NewProcessor creates a new mock instance.
func NewProcessor(ctrl *gomock.Controller) *Processor {
	mock := &Processor{ctrl: ctrl}
	mock.recorder = &ProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Processor) EXPECT() *ProcessorMockRecorder {
	return m.recorder
}

// Open mocks base method.
func (m *Processor) Open(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open.
func (mr *ProcessorMockRecorder) Open(arg0 any) *ProcessorOpenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*Processor)(nil).Open), arg0)
	return &ProcessorOpenCall{Call: call}
}

// ProcessorOpenCall wrap *gomock.Call
type ProcessorOpenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ProcessorOpenCall) Return(arg0 error) *ProcessorOpenCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ProcessorOpenCall) Do(f func(context.Context) error) *ProcessorOpenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ProcessorOpenCall) DoAndReturn(f func(context.Context) error) *ProcessorOpenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Process mocks base method.
func (m *Processor) Process(arg0 context.Context, arg1 []opencdc.Record) []sdk.ProcessedRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", arg0, arg1)
	ret0, _ := ret[0].([]sdk.ProcessedRecord)
	return ret0
}

// Process indicates an expected call of Process.
func (mr *ProcessorMockRecorder) Process(arg0, arg1 any) *ProcessorProcessCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*Processor)(nil).Process), arg0, arg1)
	return &ProcessorProcessCall{Call: call}
}

// ProcessorProcessCall wrap *gomock.Call
type ProcessorProcessCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ProcessorProcessCall) Return(arg0 []sdk.ProcessedRecord) *ProcessorProcessCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ProcessorProcessCall) Do(f func(context.Context, []opencdc.Record) []sdk.ProcessedRecord) *ProcessorProcessCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ProcessorProcessCall) DoAndReturn(f func(context.Context, []opencdc.Record) []sdk.ProcessedRecord) *ProcessorProcessCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Teardown mocks base method.
func (m *Processor) Teardown(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Teardown", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Teardown indicates an expected call of Teardown.
func (mr *ProcessorMockRecorder) Teardown(arg0 any) *ProcessorTeardownCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Teardown", reflect.TypeOf((*Processor)(nil).Teardown), arg0)
	return &ProcessorTeardownCall{Call: call}
}

// ProcessorTeardownCall wrap *gomock.Call
type ProcessorTeardownCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ProcessorTeardownCall) Return(arg0 error) *ProcessorTeardownCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ProcessorTeardownCall) Do(f func(context.Context) error) *ProcessorTeardownCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ProcessorTeardownCall) DoAndReturn(f func(context.Context) error) *ProcessorTeardownCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
