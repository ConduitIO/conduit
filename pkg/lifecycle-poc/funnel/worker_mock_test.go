// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/conduitio/conduit/pkg/lifecycle-poc/funnel (interfaces: Task)
//
// Generated by this command:
//
//	mockgen -typed -destination=worker_mock_test.go -package=funnel . Task
//

// Package funnel is a generated GoMock package.
package funnel

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTask is a mock of Task interface.
type MockTask struct {
	ctrl     *gomock.Controller
	recorder *MockTaskMockRecorder
	isgomock struct{}
}

// MockTaskMockRecorder is the mock recorder for MockTask.
type MockTaskMockRecorder struct {
	mock *MockTask
}

// NewMockTask creates a new mock instance.
func NewMockTask(ctrl *gomock.Controller) *MockTask {
	mock := &MockTask{ctrl: ctrl}
	mock.recorder = &MockTaskMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTask) EXPECT() *MockTaskMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockTask) Close(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockTaskMockRecorder) Close(arg0 any) *MockTaskCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTask)(nil).Close), arg0)
	return &MockTaskCloseCall{Call: call}
}

// MockTaskCloseCall wrap *gomock.Call
type MockTaskCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTaskCloseCall) Return(arg0 error) *MockTaskCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTaskCloseCall) Do(f func(context.Context) error) *MockTaskCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTaskCloseCall) DoAndReturn(f func(context.Context) error) *MockTaskCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Do mocks base method.
func (m *MockTask) Do(arg0 context.Context, arg1 *Batch) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *MockTaskMockRecorder) Do(arg0, arg1 any) *MockTaskDoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockTask)(nil).Do), arg0, arg1)
	return &MockTaskDoCall{Call: call}
}

// MockTaskDoCall wrap *gomock.Call
type MockTaskDoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTaskDoCall) Return(arg0 error) *MockTaskDoCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTaskDoCall) Do(f func(context.Context, *Batch) error) *MockTaskDoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTaskDoCall) DoAndReturn(f func(context.Context, *Batch) error) *MockTaskDoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ID mocks base method.
func (m *MockTask) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockTaskMockRecorder) ID() *MockTaskIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockTask)(nil).ID))
	return &MockTaskIDCall{Call: call}
}

// MockTaskIDCall wrap *gomock.Call
type MockTaskIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTaskIDCall) Return(arg0 string) *MockTaskIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTaskIDCall) Do(f func() string) *MockTaskIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTaskIDCall) DoAndReturn(f func() string) *MockTaskIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Open mocks base method.
func (m *MockTask) Open(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open.
func (mr *MockTaskMockRecorder) Open(arg0 any) *MockTaskOpenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockTask)(nil).Open), arg0)
	return &MockTaskOpenCall{Call: call}
}

// MockTaskOpenCall wrap *gomock.Call
type MockTaskOpenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTaskOpenCall) Return(arg0 error) *MockTaskOpenCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTaskOpenCall) Do(f func(context.Context) error) *MockTaskOpenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTaskOpenCall) DoAndReturn(f func(context.Context) error) *MockTaskOpenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
