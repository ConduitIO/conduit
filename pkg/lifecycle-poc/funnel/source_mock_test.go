// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/conduitio/conduit/pkg/lifecycle-poc/funnel (interfaces: Source)
//
// Generated by this command:
//
//	mockgen -typed -destination=source_mock_test.go -package=funnel . Source
//

// Package funnel is a generated GoMock package.
package funnel

import (
	context "context"
	reflect "reflect"

	opencdc "github.com/conduitio/conduit-commons/opencdc"
	gomock "go.uber.org/mock/gomock"
)

// MockSource is a mock of Source interface.
type MockSource struct {
	ctrl     *gomock.Controller
	recorder *MockSourceMockRecorder
	isgomock struct{}
}

// MockSourceMockRecorder is the mock recorder for MockSource.
type MockSourceMockRecorder struct {
	mock *MockSource
}

// NewMockSource creates a new mock instance.
func NewMockSource(ctrl *gomock.Controller) *MockSource {
	mock := &MockSource{ctrl: ctrl}
	mock.recorder = &MockSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSource) EXPECT() *MockSourceMockRecorder {
	return m.recorder
}

// Ack mocks base method.
func (m *MockSource) Ack(arg0 context.Context, arg1 []opencdc.Position) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ack", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ack indicates an expected call of Ack.
func (mr *MockSourceMockRecorder) Ack(arg0, arg1 any) *MockSourceAckCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ack", reflect.TypeOf((*MockSource)(nil).Ack), arg0, arg1)
	return &MockSourceAckCall{Call: call}
}

// MockSourceAckCall wrap *gomock.Call
type MockSourceAckCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSourceAckCall) Return(arg0 error) *MockSourceAckCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSourceAckCall) Do(f func(context.Context, []opencdc.Position) error) *MockSourceAckCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSourceAckCall) DoAndReturn(f func(context.Context, []opencdc.Position) error) *MockSourceAckCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Errors mocks base method.
func (m *MockSource) Errors() <-chan error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Errors")
	ret0, _ := ret[0].(<-chan error)
	return ret0
}

// Errors indicates an expected call of Errors.
func (mr *MockSourceMockRecorder) Errors() *MockSourceErrorsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errors", reflect.TypeOf((*MockSource)(nil).Errors))
	return &MockSourceErrorsCall{Call: call}
}

// MockSourceErrorsCall wrap *gomock.Call
type MockSourceErrorsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSourceErrorsCall) Return(arg0 <-chan error) *MockSourceErrorsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSourceErrorsCall) Do(f func() <-chan error) *MockSourceErrorsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSourceErrorsCall) DoAndReturn(f func() <-chan error) *MockSourceErrorsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ID mocks base method.
func (m *MockSource) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockSourceMockRecorder) ID() *MockSourceIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockSource)(nil).ID))
	return &MockSourceIDCall{Call: call}
}

// MockSourceIDCall wrap *gomock.Call
type MockSourceIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSourceIDCall) Return(arg0 string) *MockSourceIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSourceIDCall) Do(f func() string) *MockSourceIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSourceIDCall) DoAndReturn(f func() string) *MockSourceIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Open mocks base method.
func (m *MockSource) Open(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open.
func (mr *MockSourceMockRecorder) Open(arg0 any) *MockSourceOpenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockSource)(nil).Open), arg0)
	return &MockSourceOpenCall{Call: call}
}

// MockSourceOpenCall wrap *gomock.Call
type MockSourceOpenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSourceOpenCall) Return(arg0 error) *MockSourceOpenCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSourceOpenCall) Do(f func(context.Context) error) *MockSourceOpenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSourceOpenCall) DoAndReturn(f func(context.Context) error) *MockSourceOpenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Read mocks base method.
func (m *MockSource) Read(arg0 context.Context) ([]opencdc.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].([]opencdc.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockSourceMockRecorder) Read(arg0 any) *MockSourceReadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockSource)(nil).Read), arg0)
	return &MockSourceReadCall{Call: call}
}

// MockSourceReadCall wrap *gomock.Call
type MockSourceReadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSourceReadCall) Return(arg0 []opencdc.Record, arg1 error) *MockSourceReadCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSourceReadCall) Do(f func(context.Context) ([]opencdc.Record, error)) *MockSourceReadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSourceReadCall) DoAndReturn(f func(context.Context) ([]opencdc.Record, error)) *MockSourceReadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Teardown mocks base method.
func (m *MockSource) Teardown(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Teardown", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Teardown indicates an expected call of Teardown.
func (mr *MockSourceMockRecorder) Teardown(arg0 any) *MockSourceTeardownCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Teardown", reflect.TypeOf((*MockSource)(nil).Teardown), arg0)
	return &MockSourceTeardownCall{Call: call}
}

// MockSourceTeardownCall wrap *gomock.Call
type MockSourceTeardownCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSourceTeardownCall) Return(arg0 error) *MockSourceTeardownCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSourceTeardownCall) Do(f func(context.Context) error) *MockSourceTeardownCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSourceTeardownCall) DoAndReturn(f func(context.Context) error) *MockSourceTeardownCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
