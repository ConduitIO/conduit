// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/conduitio/conduit/pkg/lifecycle-poc/funnel (interfaces: Destination)
//
// Generated by this command:
//
//	mockgen -typed -destination=destination_mock_test.go -package=funnel . Destination
//

// Package funnel is a generated GoMock package.
package funnel

import (
	context "context"
	reflect "reflect"

	opencdc "github.com/conduitio/conduit-commons/opencdc"
	connector "github.com/conduitio/conduit/pkg/connector"
	gomock "go.uber.org/mock/gomock"
)

// MockDestination is a mock of Destination interface.
type MockDestination struct {
	ctrl     *gomock.Controller
	recorder *MockDestinationMockRecorder
	isgomock struct{}
}

// MockDestinationMockRecorder is the mock recorder for MockDestination.
type MockDestinationMockRecorder struct {
	mock *MockDestination
}

// NewMockDestination creates a new mock instance.
func NewMockDestination(ctrl *gomock.Controller) *MockDestination {
	mock := &MockDestination{ctrl: ctrl}
	mock.recorder = &MockDestinationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDestination) EXPECT() *MockDestinationMockRecorder {
	return m.recorder
}

// Ack mocks base method.
func (m *MockDestination) Ack(arg0 context.Context) ([]connector.DestinationAck, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ack", arg0)
	ret0, _ := ret[0].([]connector.DestinationAck)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ack indicates an expected call of Ack.
func (mr *MockDestinationMockRecorder) Ack(arg0 any) *MockDestinationAckCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ack", reflect.TypeOf((*MockDestination)(nil).Ack), arg0)
	return &MockDestinationAckCall{Call: call}
}

// MockDestinationAckCall wrap *gomock.Call
type MockDestinationAckCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDestinationAckCall) Return(arg0 []connector.DestinationAck, arg1 error) *MockDestinationAckCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDestinationAckCall) Do(f func(context.Context) ([]connector.DestinationAck, error)) *MockDestinationAckCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDestinationAckCall) DoAndReturn(f func(context.Context) ([]connector.DestinationAck, error)) *MockDestinationAckCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Errors mocks base method.
func (m *MockDestination) Errors() <-chan error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Errors")
	ret0, _ := ret[0].(<-chan error)
	return ret0
}

// Errors indicates an expected call of Errors.
func (mr *MockDestinationMockRecorder) Errors() *MockDestinationErrorsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errors", reflect.TypeOf((*MockDestination)(nil).Errors))
	return &MockDestinationErrorsCall{Call: call}
}

// MockDestinationErrorsCall wrap *gomock.Call
type MockDestinationErrorsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDestinationErrorsCall) Return(arg0 <-chan error) *MockDestinationErrorsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDestinationErrorsCall) Do(f func() <-chan error) *MockDestinationErrorsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDestinationErrorsCall) DoAndReturn(f func() <-chan error) *MockDestinationErrorsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ID mocks base method.
func (m *MockDestination) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockDestinationMockRecorder) ID() *MockDestinationIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockDestination)(nil).ID))
	return &MockDestinationIDCall{Call: call}
}

// MockDestinationIDCall wrap *gomock.Call
type MockDestinationIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDestinationIDCall) Return(arg0 string) *MockDestinationIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDestinationIDCall) Do(f func() string) *MockDestinationIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDestinationIDCall) DoAndReturn(f func() string) *MockDestinationIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Open mocks base method.
func (m *MockDestination) Open(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open.
func (mr *MockDestinationMockRecorder) Open(arg0 any) *MockDestinationOpenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockDestination)(nil).Open), arg0)
	return &MockDestinationOpenCall{Call: call}
}

// MockDestinationOpenCall wrap *gomock.Call
type MockDestinationOpenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDestinationOpenCall) Return(arg0 error) *MockDestinationOpenCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDestinationOpenCall) Do(f func(context.Context) error) *MockDestinationOpenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDestinationOpenCall) DoAndReturn(f func(context.Context) error) *MockDestinationOpenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Teardown mocks base method.
func (m *MockDestination) Teardown(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Teardown", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Teardown indicates an expected call of Teardown.
func (mr *MockDestinationMockRecorder) Teardown(arg0 any) *MockDestinationTeardownCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Teardown", reflect.TypeOf((*MockDestination)(nil).Teardown), arg0)
	return &MockDestinationTeardownCall{Call: call}
}

// MockDestinationTeardownCall wrap *gomock.Call
type MockDestinationTeardownCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDestinationTeardownCall) Return(arg0 error) *MockDestinationTeardownCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDestinationTeardownCall) Do(f func(context.Context) error) *MockDestinationTeardownCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDestinationTeardownCall) DoAndReturn(f func(context.Context) error) *MockDestinationTeardownCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Write mocks base method.
func (m *MockDestination) Write(arg0 context.Context, arg1 []opencdc.Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockDestinationMockRecorder) Write(arg0, arg1 any) *MockDestinationWriteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockDestination)(nil).Write), arg0, arg1)
	return &MockDestinationWriteCall{Call: call}
}

// MockDestinationWriteCall wrap *gomock.Call
type MockDestinationWriteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDestinationWriteCall) Return(arg0 error) *MockDestinationWriteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDestinationWriteCall) Do(f func(context.Context, []opencdc.Record) error) *MockDestinationWriteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDestinationWriteCall) DoAndReturn(f func(context.Context, []opencdc.Record) error) *MockDestinationWriteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
