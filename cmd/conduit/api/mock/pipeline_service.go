// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/conduitio/conduit/cmd/conduit/api (interfaces: PipelineService)
//
// Generated by this command:
//
//	mockgen -destination=mock/pipeline_service.go -package=mock . PipelineService
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	apiv1 "github.com/conduitio/conduit/proto/api/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockPipelineService is a mock of PipelineService interface.
type MockPipelineService struct {
	ctrl     *gomock.Controller
	recorder *MockPipelineServiceMockRecorder
	isgomock struct{}
}

// MockPipelineServiceMockRecorder is the mock recorder for MockPipelineService.
type MockPipelineServiceMockRecorder struct {
	mock *MockPipelineService
}

// NewMockPipelineService creates a new mock instance.
func NewMockPipelineService(ctrl *gomock.Controller) *MockPipelineService {
	mock := &MockPipelineService{ctrl: ctrl}
	mock.recorder = &MockPipelineServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipelineService) EXPECT() *MockPipelineServiceMockRecorder {
	return m.recorder
}

// GetDLQ mocks base method.
func (m *MockPipelineService) GetDLQ(ctx context.Context, in *apiv1.GetDLQRequest, opts ...grpc.CallOption) (*apiv1.GetDLQResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDLQ", varargs...)
	ret0, _ := ret[0].(*apiv1.GetDLQResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDLQ indicates an expected call of GetDLQ.
func (mr *MockPipelineServiceMockRecorder) GetDLQ(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDLQ", reflect.TypeOf((*MockPipelineService)(nil).GetDLQ), varargs...)
}

// GetPipeline mocks base method.
func (m *MockPipelineService) GetPipeline(ctx context.Context, in *apiv1.GetPipelineRequest, opts ...grpc.CallOption) (*apiv1.GetPipelineResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPipeline", varargs...)
	ret0, _ := ret[0].(*apiv1.GetPipelineResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPipeline indicates an expected call of GetPipeline.
func (mr *MockPipelineServiceMockRecorder) GetPipeline(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPipeline", reflect.TypeOf((*MockPipelineService)(nil).GetPipeline), varargs...)
}

// ListPipelines mocks base method.
func (m *MockPipelineService) ListPipelines(ctx context.Context, in *apiv1.ListPipelinesRequest, opts ...grpc.CallOption) (*apiv1.ListPipelinesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPipelines", varargs...)
	ret0, _ := ret[0].(*apiv1.ListPipelinesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPipelines indicates an expected call of ListPipelines.
func (mr *MockPipelineServiceMockRecorder) ListPipelines(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPipelines", reflect.TypeOf((*MockPipelineService)(nil).ListPipelines), varargs...)
}
