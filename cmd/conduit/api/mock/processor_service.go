// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/conduitio/conduit/cmd/conduit/api (interfaces: ProcessorService)
//
// Generated by this command:
//
//	mockgen -destination=mock/processor_service.go -package=mock . ProcessorService
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	apiv1 "github.com/conduitio/conduit/proto/api/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockProcessorService is a mock of ProcessorService interface.
type MockProcessorService struct {
	ctrl     *gomock.Controller
	recorder *MockProcessorServiceMockRecorder
	isgomock struct{}
}

// MockProcessorServiceMockRecorder is the mock recorder for MockProcessorService.
type MockProcessorServiceMockRecorder struct {
	mock *MockProcessorService
}

// NewMockProcessorService creates a new mock instance.
func NewMockProcessorService(ctrl *gomock.Controller) *MockProcessorService {
	mock := &MockProcessorService{ctrl: ctrl}
	mock.recorder = &MockProcessorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessorService) EXPECT() *MockProcessorServiceMockRecorder {
	return m.recorder
}

// GetProcessor mocks base method.
func (m *MockProcessorService) GetProcessor(ctx context.Context, in *apiv1.GetProcessorRequest, opts ...grpc.CallOption) (*apiv1.GetProcessorResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProcessor", varargs...)
	ret0, _ := ret[0].(*apiv1.GetProcessorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProcessor indicates an expected call of GetProcessor.
func (mr *MockProcessorServiceMockRecorder) GetProcessor(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProcessor", reflect.TypeOf((*MockProcessorService)(nil).GetProcessor), varargs...)
}

// ListProcessorPlugins mocks base method.
func (m *MockProcessorService) ListProcessorPlugins(ctx context.Context, in *apiv1.ListProcessorPluginsRequest, opts ...grpc.CallOption) (*apiv1.ListProcessorPluginsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProcessorPlugins", varargs...)
	ret0, _ := ret[0].(*apiv1.ListProcessorPluginsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProcessorPlugins indicates an expected call of ListProcessorPlugins.
func (mr *MockProcessorServiceMockRecorder) ListProcessorPlugins(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProcessorPlugins", reflect.TypeOf((*MockProcessorService)(nil).ListProcessorPlugins), varargs...)
}

// ListProcessors mocks base method.
func (m *MockProcessorService) ListProcessors(ctx context.Context, in *apiv1.ListProcessorsRequest, opts ...grpc.CallOption) (*apiv1.ListProcessorsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProcessors", varargs...)
	ret0, _ := ret[0].(*apiv1.ListProcessorsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProcessors indicates an expected call of ListProcessors.
func (mr *MockProcessorServiceMockRecorder) ListProcessors(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProcessors", reflect.TypeOf((*MockProcessorService)(nil).ListProcessors), varargs...)
}
