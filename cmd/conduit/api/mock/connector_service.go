// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/conduitio/conduit/cmd/conduit/api (interfaces: ConnectorService)
//
// Generated by this command:
//
//	mockgen -destination=mock/connector_service.go -package=mock . ConnectorService
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	apiv1 "github.com/conduitio/conduit/proto/api/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockConnectorService is a mock of ConnectorService interface.
type MockConnectorService struct {
	ctrl     *gomock.Controller
	recorder *MockConnectorServiceMockRecorder
	isgomock struct{}
}

// MockConnectorServiceMockRecorder is the mock recorder for MockConnectorService.
type MockConnectorServiceMockRecorder struct {
	mock *MockConnectorService
}

// NewMockConnectorService creates a new mock instance.
func NewMockConnectorService(ctrl *gomock.Controller) *MockConnectorService {
	mock := &MockConnectorService{ctrl: ctrl}
	mock.recorder = &MockConnectorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectorService) EXPECT() *MockConnectorServiceMockRecorder {
	return m.recorder
}

// GetConnector mocks base method.
func (m *MockConnectorService) GetConnector(ctx context.Context, in *apiv1.GetConnectorRequest, opts ...grpc.CallOption) (*apiv1.GetConnectorResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConnector", varargs...)
	ret0, _ := ret[0].(*apiv1.GetConnectorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnector indicates an expected call of GetConnector.
func (mr *MockConnectorServiceMockRecorder) GetConnector(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnector", reflect.TypeOf((*MockConnectorService)(nil).GetConnector), varargs...)
}

// ListConnectorPlugins mocks base method.
func (m *MockConnectorService) ListConnectorPlugins(ctx context.Context, in *apiv1.ListConnectorPluginsRequest, opts ...grpc.CallOption) (*apiv1.ListConnectorPluginsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConnectorPlugins", varargs...)
	ret0, _ := ret[0].(*apiv1.ListConnectorPluginsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConnectorPlugins indicates an expected call of ListConnectorPlugins.
func (mr *MockConnectorServiceMockRecorder) ListConnectorPlugins(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnectorPlugins", reflect.TypeOf((*MockConnectorService)(nil).ListConnectorPlugins), varargs...)
}

// ListConnectors mocks base method.
func (m *MockConnectorService) ListConnectors(ctx context.Context, in *apiv1.ListConnectorsRequest, opts ...grpc.CallOption) (*apiv1.ListConnectorsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListConnectors", varargs...)
	ret0, _ := ret[0].(*apiv1.ListConnectorsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConnectors indicates an expected call of ListConnectors.
func (mr *MockConnectorServiceMockRecorder) ListConnectors(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnectors", reflect.TypeOf((*MockConnectorService)(nil).ListConnectors), varargs...)
}
